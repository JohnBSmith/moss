
use string.syntax: parser, SyntaxError

ast = parser{
   scan = {symbols = list("+-*/^()")},
   transform = {
      atom = "", power_expr = "", neg_expr = "",
      add_expr = "", mul_expr = "",
      add = "+", sub = "-", mul = "*", div = "/",
      power = "^", neg = "~"
   },
   grammar = "
      atom = number | identifier | '(' add_expr ')';
      power = atom '^' neg_expr;
      power_expr = power | atom;
      neg = '-' power_expr;
      neg_expr = neg | power_expr;
      mul = '*' neg_expr;
      div = '/' neg_expr;
      mul_expr = neg_expr {mul | div};
      add = '+' mul_expr;
      sub = '-' mul_expr;
      add_expr = mul_expr {add | sub};
      ast = add_expr;
   "
}

dispatch = {
  "+": |x,y| x+y, "-": |x,y| x-y,
  "*": |x,y| x*y, "/": |x,y| x//y,
  "^": |x,y| x^y, "~": |x| -x
}

evaluate = |t| (t if t: Int else
   dispatch[t[0]](*t[1..].map(evaluate)))

function ev(s)
   t = ast(s)
   return evaluate(t)
end

assert ev("1")==1, "1.1"
assert ev("1+2")==3, "1.2"
assert ev("(1+2)*(3+4)")==21, "1.3"
assert ev("2^-(1-2)")==2, "1.4"
assert ev("2^2^4")==2^16, "1.5"
assert ev("1+2-3+4-5+6")==5, "1.6"

