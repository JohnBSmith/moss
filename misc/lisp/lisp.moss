
use string.syntax: parser, SyntaxError
use sys: argv

ast = parser{
   transform = {atom = "", expr = "", list = |t| t[1..]},
   grammar = """
      atom = number | identifier;
      list = ('(' {expr}* ')');
      expr = atom | list;
      ast = expr;
   """
}

dispatch = {
   "lambda": |t,con| |x| evaluate(t[2],table con(
      map(zip(t[1],x)) if t[1]: List else {t[1]: x[0]})),
   "if": (|t,con|
      evaluate(t[2],con) if evaluate(t[1],con) else
      evaluate(t[3],con)),
   "define": fn|t,con|
      con.(t[1]) = evaluate(t[2],con)
   end
}

global_context = table{
   "add": |a| a.sum(), "mul": |a| a.prod(),  
   "sub": |a| a[0]-a[1], "div": |a| a[0]/a[1],
   "true": true, "false": false,
   "eq": |a| a[0]==a[1], "neq": |a| a[0]!=a[1],
   "lt": |a| a[0]<a[1], "le": |a| a[0]<=a[1],
   "block": |a| a[-1], "display": |a| print(*a)
}

function evaluate(t,con)
   if t: String
      return con.(t)
   elif t: List
      if t[0]: String and t[0] in dispatch
         return dispatch[t[0]](t,con)
      else
         a = t.map(|x| evaluate(x,con))
         return a[0](a[1..])
      end
   else
      return t
   end
end

function repl()
   hist = []
   while true
      s = input("# ",hist)
      hist.push(s)
      try
         t = ast(s)
      catch e if e: SyntaxError
         print(e.text,"\n")
         continue
      end
      value = evaluate(t,global_context)
      if not value is null
         print(value)
      end
   end
end

function evals(s)
   t = ast(["(block ",s,")"].join())
   value = evaluate(t,global_context)
end

if len(argv)==1
   repl()
else
   evals(read(argv[1]))
end
