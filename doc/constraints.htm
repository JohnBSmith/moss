<!DOCTYPE html>
<html>
<head>
  <meta charset="UTF-8">
  <title>Constraints</title>
  <link rel="stylesheet" href="css/main.css">
</head>
<body>

<table class="navigation">
<tr><td><b>&uarr;</b> <a href="../home.htm">Home</a>
</table>
<h2>Development driven by constraints</h2>

<h3>Language specification</h3>
<ol>
<li>Positional arguments should not be callable as named
  arguments. This would make an argument's name a
  part of the public interface. Changing the name afterwards would
  thus be a breaking change.
<li>The order of named arguments should not matter.
<li>Named arguments and dictionaries should be unified.
<li>Automatic partial application or automatic
  currying should not exist, as this would disguise argument
  count errors.
<li>It should be ergonomic to use tables and dictionaries
  together with string formatting or string interpolation.
<li>Private global variables should be possible.
<li>Private class and object fields should be possible.
<li>The syntax of nested expressions should mix different kinds of
  brackets in order to increase readability. Moss does this quite well
  with a mixture of parentheses, square brackets, braces and keywords.
<li>There should be no index operation for iterators. This would
  confuse iterators with arrays and thus lead to subtile bugs.
<li>The syntax <code>f[a]</code> for functions means, iterators
  need to check the number of given arguments, as iterators coincide
  with functions with no arguments.
<li>The function <code>len</code> should not be defined for
  iterators. This would confuse iterators with arrays and thus
  lead to subtile bugs.
</ol>


<h3>Object system</h3>
<ol>
<li>Destructors should be possible.
<li>The function <code>type(x)</code> should return <code>null</code>
  in case <code>x</code> has no type. Otherwise it cannot be used
  for type guards in general. For the same reason, <code>x: T</code>
  should return false for every object <code>T</code> if <code>x</code>
  does not implement the operation.
</ol>

<h3>Implementation</h3>
<ol>
<li>A new object on the call stack should have
<code>refcount==1</code>. For example, if <code>A()</code> computes a
large matrix, then <code>A().map(f)</code> and <code>A()+B</code>
etc. do not need a memory allocation, because the buffer can be
reused. Rust offers <code>get_mut(this: &amp;mut Rc&lt;T&gt;)</code>,
<code>make_mut(this: &amp;mut Rc&lt;T&gt;)</code>
and <code>try_unwrap(this: Rc&lt;T&gt;)</code>. Thus, as a further
implication, ownership of <code>Object</code> is needed, because
<code>&amp;Object</code> does not allow access as
<code>&amp;mut Rc</code>. However, matrix types have an inner
<code>Rc</code> of the buffer, therefore it suffices to check
<code>strong_count</code>, which needs only <code>&amp;Rc</code>.
</ol>

<h3>Pixel graphics</h3>
<ol>
<li>It should be allowed to draw to more than one buffer.
<li>It should be allowed to draw relative to a position.
<li>There should be at least one good monospace bitmap font in all
  sizes from one size to doubled size, containing the standard sizes
  for 60 ppi up to 160 ppi. For minimalism it should be stored as a
  matrix in a raw buffer, i.e. in the PGM format. Each font file
  should contain at least the first 256 Unicode code points. A font
  file containing just the first 256 code points should be
  arranged as 32*8. &mdash; Currently an adaption of Vera/DejaVu Sans
  Mono is used. 
<li>The font loader should also be able to load GNU Unifont.
</ol>

<h3>Vector graphics</h3>
<ol>
<li>It should be allowed to draw to more than one buffer.
  Some alpha blending and anti-aliasing techniques need
  intermediate buffers.
<li>It should be allowed to draw relative to a position and scale.
<li>Buffers with floating point color depth and alpha depth should
  be available.
<li>Colors and alpha values should be given as floating point numbers.
<li>There should be convenience functions to convert between
  color spaces.
<ol>

</body>
</html>

