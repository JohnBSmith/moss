<!DOCTYPE html>
<html>
<head>
  <meta charset="UTF-8">
  <title>Manual</title>
  <link rel="stylesheet" href="css/main.css">
</head>
<body>

<table class="navigation">
<tr><td><b>&uarr;</b> <a href="../home.htm">Home</a>
</table>
<h1>Moss Manual</h1>

<ul>
<li><a href="#cmd">Command-line options</a>
<li><a href="#tools">Using Moss for command-line tools</a>
<li><a href="#building">Building</a>
  <ul>
  <li><a href="#linux">Linux</a>
  <li><a href="#x86-64">Cross compilation, target: x86-64</a>
  <li><a href="#windows">Cross compilation, target: Windows</a>
  </ul>
<li><a href="#installation">Installation</a>
<li><a href="#dev-tools">Development tools</a>
</ul>

<br>
<h2 id="cmd">Command-line options</h2>
<pre>
<b>moss [options] [file [arguments]]</b>

<b>Options</b>:
-i file     Include and execute a file before normal execution.
            Multiple files are possible: '-i file1 -i file2'.

-m          Math mode: use moss as a calculator.

-e "1+2"    Evaluate some Moss code inline.

-d          Debug mode: compile assert statements.

-unsafe     Unsafe mode: run the interpreter in privileged mode,
            which allows write access to files, network access
            and execution of shell commands. Running an untrusted
            module in unsafe mode is a security hazard.
</pre>

<br>
<h2 id="tools">Using Moss for command-line tools</h2>

<p>Crate a file <code>tool.moss</code> with the following content:
<pre class="indent">
#!/usr/bin/env moss
use sys: argv

print(argv)
</pre>

<p>Now strip the file name extension from the file name and
change the file permission to <i>executeable</i>.
Open a terminal in the directory and type in:
<pre class="indent">
./tool hello world
</pre>

<p>Now copy the file to a place in <code>PATH</code>.
These places are shown by:
<pre class="indent">
echo $PATH
</pre>

<p>But make sure that the file does not shadow another command with the
same name. The program may now be executed in every directory
by typing:
<pre class="indent">
tool hello world
</pre>


<br>
<h2 id="building">Building</h2>
<h3 id="linux">Linux</h3>

<p>Obtain Ubuntu, or else Debian, or else another
fancy Linux, or else a fancy POSIX system, or else Windows.
If some dependency cannot be fulfilled, set up a minimal build
and then add feature after feature until some error occurs.

<p>Windows is currently not supported.
If you want to port to Windows, edit the operating system interface:
<p class="indent"><code>src/system/system-windows.rs</code>
<p>and send upstream pull request to:
<p class="indent">
<a href="https://github.com/JohnBSmith/moss">github.com/JohnBSmith/moss</a>
<br><br>

<pre>
<b>Install dependencies</b>:
sudo apt install rustc
sudo apt install cargo


<b>Alternatively (enables cross compilation)</b>:
sudo apt install curl
curl https://sh.rustup.rs -sSf | sh


<b>Install optional dependencies</b>:
sudo apt install libgmp-dev
sudo apt install libsdl2-dev
sudo apt install libsdl2-ttf-dev


<b>Currently unused optional dependencies</b>:
sudo apt install libblas-dev
sudo apt install liblapacke-dev


<b>For the first compilation,
Cargo needs network connection</b>:
[dependencies]
libc = "0.2"
termios = "0.2"


<b>Configure optional dependencies in <code>Cargo.toml</code></b>:
# Minimal
# default = ["long-none"]

# Basic
# default = ["long-none", "math-la", "math-sf"]

# Full
default = ["long-gmp", "math-la", "math-sf", "graphics"]


<b>Run one of the following</b>:
cargo check
cargo build
cargo build --release
sh make.sh
</pre>

<h3 id="x86-64">Cross compilation, target: x86-64</h3>
<pre>
rustup target add x86_64-unknown-linux-gnu
sudo apt install qemu-user

sudo apt install gcc-multilib
# Workaround for a bug:
# /usr/bin/ld: cannot find Scrt1.o: No such file or directory
# /usr/bin/ld: cannot find crti.o: No such file or directory

cargo build --target x86_64-unknown-linux-gnu
qemu-x86_64 ./moss
</pre>

<h3 id="windows">Cross compilation, target: Windows</h3>
<pre>
rustup target add i686-pc-windows-gnu
sudo apt install wine

# Workaround for a linker bug:
# Add these lines to .cargo/config:
[target.x86_64-pc-windows-gnu]
linker = "/usr/bin/x86_64-w64-mingw32-gcc"
[target.i686-pc-windows-gnu]
linker = "/usr/bin/i686-w64-mingw32-gcc"
rustflags = "-C panic=abort"

cargo build --target i686-pc-windows-gnu
wine ./moss
</pre>


<h2 id="installation">Installation</h2>

<p>Set up the latest development version:
<ul>
<li>build <code>moss</code>
<li>run <code>sudo sh install.sh</code>
</ul>

<p>Maybe you need to switch your operating system account to have
system administration access. Then also run
<code>sh install-lib.sh</code> on your user account to install the
moss library locally. The library will be found at:

<p class="indent"><code>/home/account/.moss</code>


<h2 id="dev-tools">Development tools</h2>
<pre>
# IDE
sudo apt install geany

# Debugger, dynamic program analysis
sudo apt install valgrind
sudo apt install kcachegrind
sudo apt install gdb

# Emulator for cross compiler output
sudo apt install wine

# Compare a file and its modification
sudo apt install kompare

# Find all occurrences of a pattern
egrep -nrwi "regex" ./
  () | [] . * ?
  {n} {min,} {,max} {min,max}
  ^ $ \&lt; \&gt; \w \b

# GNU Scientific Library
sudo apt install libgsl-dev
</pre>

</body>
</html>

