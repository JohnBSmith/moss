<!DOCTYPE html>
<html>
<head>
  <meta charset="UTF-8">
  <title>Advanced</title>
  <link rel="stylesheet" href="../css/main.css">
  <script src = "../js/moss-syntax.js">
  </script>
</head>
<body>

<table class="navigation">
<tr><td><b>&uarr;</b> <a href="Table-of-contents.htm">Up</a>
</table>
<h1>Advanced topics</h1>

<div class="toc">
<h2 id="toc">Table of contents</h2>
<ol>
<li><a href="#Stringbuffer">Stringbuffers</a>
<li><a href="#Memoisation">Memoisation</a>
<li><a href="#uniq">Unique</a>
<li><a href="#Multiple-dispatch">Multiple dispatch</a>
</ol>
</div>

<h2 id="Regression">Stringbuffers</h2>

<p>In Moss strings are immutable. That means, after construction,
a string cannot be modified. Therefore one cannot append a
string <code>s2</code> to a string <code>s1</code>. To bypass
this problem one could write <code>s1=s1+s2</code>. But this
sparks off another problem. To understand this we should have
a look on the following statement:

<pre class="moss indent">
s = s1+s2+s3+s4+s5+s6
</pre>

<p>All additions except the last require the construction of
a temporary string that will be deleted after the next addition.
This results in a huge amount of memory allocations and memory
displacements. And the memory to displace gets longer and longer.
The following program unveils the full painfullness of this
approach.

<pre class="moss indent">
n = 1000
s = ""
for i in 1..n
  s = s+"."
end
</pre>

<p>We may increase <code>n</code> to <code>10000</code>
or <code>100000</code> and measure
how long it takes. A better method is to use the
method <code>join</code> that glues strings together:

<pre class="moss indent">
s = [s1,s2,s3,s4,s5,s6].join()
</pre>

<p>Now one can use a list as a buffer.

<pre class="moss indent">
a = []
for i in 1..n
  a.push(".")
end
s = a.join()
</pre>

<h2 id="Memoisation">Memoisation</h2>

<p>We can directly obtain an implementation from the
recursive definition of the Fibonacci-squence:
</p>

<pre class="moss indent">
fib = |n| 1 if n==1 or n==2 else fib(n-1)+fib(n-2)
</pre>

<p>If <code>n</code> increases by one, the number of needed calls
to <code>fib</code> is <em>multiplied</em> by a factor of two.
Ok, let <code>N</code> be this number of needed calls. Then we have

<pre class="indent">
N(n+1) = 2N(n).
</pre>
<p>Mathematics says, the solution of this equation is
<code>N(n)=c+2^n</code>. That <code>c</code> is some uninteresting
constant. If <code>t</code> is the amount of time
a call would take, the computer spends <code>t*N(n)</code>
for the computation.

<p>But <code>fib</code> is so simple, it is obvious, that
the computation should take only <code>N(n)=c+n</code> calls.

<p>The following memoizing fixed point combinator achieves this.
<pre class="moss indent">
sub fix(F)
  m = {}
  return sub g|n|
    if n not in m then m[n] = F(g,n) end
    return m[n]
  end
end

fib = fix(|f,n| 1 if n==1 or n==2 else f(n-1)+f(n-2))
</pre>


<h2 id="uniq">Unique</h2>

<p>Uniq(ue) is an operation that removes duplicates from a list.
Sets and dictionarys provide a simple way to state this operation.
The first way to achieve unique is to convert the list into a set and
then back into a list.

<pre class="moss indent">
# (1)
uniq = |a| list(set(a))
</pre>

<p>If two non-equal elements have a different string representation
we can use a dictionary construction instead of a set construction.

<pre class="moss indent">
# (2)
uniq = |a| list(a.dict(|x| [str(x),x]).values())
</pre>

<p>What should be equal and what not, may be abstracted by
a projection function&nbsp;<code>p</code>:

<pre class="moss indent">
uniq = |a,p| list(a.dict(|x| [p(x),x]).values())
</pre>

<p>The last one is very general, with <code>uniq(a,|x| x)</code>
equivalent to (1) and <code>uniq(a,str)</code> equivalent to (2).

<p>Floating point numbers need a version of unique that takes
a desired precision:
<pre class="moss indent">
uniq = |a,prec| list(a.dict(|x| [int(x/prec),x]).values())
</pre>

<h2 id="Multiple-dispatch">Multiple dispatch</h2>

<p>Here is a basic implementation of multiple dispatch in Moss.
At first, some auxiliary functionality is to be defined.
<pre class="moss indent">
dtab = {}

sub define(m,d)
  if m not in dtab
    dtab[m] = d
  else
    dtab[m].update(d)
  end
end

method = {
  2: sub|m|
    f = dtab[m]
    return |x,y| f[[type(x),type(y)]](x,y)
  end
}
</pre>
<p>So far, <code>dtab</code> is thought to contain a dispatch table
for each method name.

<p>Now we can specify a multimethod:
<pre class="moss indent">
Str = String

define("f",{
  [Int,Int]: |x,y| "({},{}) [Int,Int]"%[x,y],
  [Str,Str]: |x,y| "({},{}) [Str,Str]"%[x,y],
  [Int,Str]: |x,y| "({},{}) [Int,Str]"%[x,y],
  [Str,Int]: |x,y| "({},{}) [Str,Int]"%[x,y]
})

f = method[2]("f")

print(f(1,2))
print(f("x","y"))
print(f(1,"y"))
print(f("x",2))

# Output:
# (1,2) [Int,Int]
# (x,y) [Str,Str]
# (1,y) [Int,Str]
# (x,2) [Str,Int]
</pre>

</body>
</html>

