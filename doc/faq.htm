<!DOCTYPE html>
<html>
<head>
  <meta charset="UTF-8">
  <title>FAQ</title>
  <link rel="stylesheet" href="css/main.css">
  <script src="js/moss-syntax.js"></script>
</head>
<body>

<table class="navigation">
<tr><td><b>&uarr;</b> <a href="../home.htm">Home</a>
</table>
<h1>FAQ</h1>
<p>Answers to questions that are asked frequently or might be
asked frequently in the future.

<h2>Table of contents</h2>
<ol>
<li><a href="#general">General questions</a>
  <ol>
  <li><a href="#what-is-moss">What is Moss?</a>
  <li><a href="#what-is-moss-suitable-for">What is Moss suitable for?</a>
  <li><a href="#what-is-the-goal">What is the project goal?</a>
  <li><a href="#how-fast-is-moss">How fast is moss?</a>
  </ol>
<li><a href="#programming">Programming</a>
  <ol>
  <li><a href="#async">Is async available?</a>
  </ol>
</ol>

<h2 id="general">General questions</h2>
<h3 id="what-is-moss">What is Moss?</h3>
<p>Moss is a dynamically typed programming language, which allows
functional and object oriented programming.

<p>The program <code>moss</code>, written in lower case, consists
of a small compiler and a larger byte code interpreter. It is also
available as a library, which could be integrated into another
program.

<h3 id="what-is-this-suitable-for">What is Moss suitable for?</h3>
<p>Moss is meant to be a general purpose programming language, but
it is certainly not suitable for everything. Most well suited would
it be for scripting or as an interface language to performant programs.

<p>For example, Moss is developed together with a scientific library,
a matrix caculator and a plotting library, serving purposes similar to
SciPy, Matlab/Octave, Gnuplot and Matplotlib.

<p>Moss is not suitable for programs that should run
performant on the bare metal cold or for large complex systems,
due to its lack of a static type system and optimizations.

<p>Be aware that callback functions written in a dynamically typed
language might slow down systems written in a performant
language. If callback functions occur at critical locations, it might
be necessary to reformulate the whole procedure in the performant
language.

<h3 id="what-is-the-goal">What is the project goal?</h3>

<p>The project goals are so far:
<ul>
<li>Showing that a type safe and memory safe
  implementation is possible.
<li>Determining a design of a Rust-Moss ecosystem.
<li>Doing research in the design of interpreter kernels.
<li>A first language for teaching computer programming.
<li>An enhanced calculator, providing long integers, exact rational
numbers, multiple-precision floating point numbers, matrix
calculations and a large number of numerical routines and special
functions.
</ul>

<h3 id="how-fast-is-moss">How fast is moss?</h3>
<p>Have a look on these micro benchmarks:
<p class="indent">&rarr;&nbsp;<a href="benchmarks.htm">Benchmarks</a>.

<br>
<h2 id="programming">Programming</h2>
<h3 id="async">Is async available?</h3>
<p>Asynchronous functions are currently not implemented, but planned
for the future. It is easy to implement async-await as a syntactic
sugar, once the coroutine/continuation system is completed.

<p>Alternatively, to be more minimalistic, <code>async</code> might
be provided as a library module, dispensing with syntacic sugar,
as coroutine syntax is versatile enough. Currently possible is the
following toy implementation of <code>async</code>:
<pre class="moss indent">
async_list = []

function async(f)
  return fn|*a|
    async_list.push(f(*a))
  end
end

function scheduler
  for fp in cycle(async_list)
    fp()
  end
end

f = async(|text| fn*||
  while true
    print(text)
    yield
  end
end)

g = async(|text| fn*||
  while true
    print(text)
    print(text)
    yield
  end
end)

f("la")
g("dup")

scheduler()
</pre>

</body>
</html>

