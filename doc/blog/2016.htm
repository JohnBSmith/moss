<!DOCTYPE html>
<html>
<head>
  <meta charset="UTF-8">
  <title>Blog</title>
  <link rel="stylesheet" href="../css/main.css">
  <script src="../js/moss-syntax.js"></script>
  <script src="../js/blog.js"></script>
  <script>
window.onload = function(){
  toc();
  main();
}
  </script>
</head>
<body>

<table class="navigation">
<tr><td><b>&uarr;</b> <a href="../blog.htm">Blog</a>
</table>
<h1>Development blog 2016-2019</h1>
<h2>Table of contents</h2>
<div id="toc" class="toc"></div>

<h3 data-date="20160808" id="new-formatted-printing-policy"
>New formatted printing policy</h3>
<p>Separation between formatted printing to <code>stdout</code> and string
buffers shall be resolved. Formatted printing to <code>stdout</code>
shall be removed in favor of string buffers.


<h3 data-date="20160808" id="new-formatted-printing-function"
>New formatted printing function</h3>

<p>Moss gets a function and syntax for formatted printing.
I&nbsp;will compare it with equivalents from&nbsp;C.

<pre class="indent">
   C: printf("(%li,%li)",x,y)
Moss: print("({},{})"%[x,y])

   C: snprintf(s,N,"(%li,%li)",x,y)
Moss: s = "({},{})" % [x,y]
</pre>

<p>The template syntax will be similar to <code>format</code>
from Python but may differ more or less.

<pre class="moss indent">
# Here is an example of proper usage:
a = list(0..10).map(|x| [x,x^2])
buffer=[]
for t in a
  buffer.push("({},{})"%t)
end
s = buffer.join("\n")
print(s)

# More briefly:
/*1*/ a = list(0..10).map(|x| [x,x^2])
/*2*/ s = a.map(|t| "({},{})"%t).join("\n")
/*3*/ print(s)
</pre>
<p>We see a practical pattern: a strict separation between actual
information structure (1), formatting (2) and stdout (3).

<p>Note: to have advanced output, libraries should be provided
that return tables as HTML5, LaTeX2e and plots as PNG, SVG
as automatically as possible. Whole documents or books (libraries?)
could be generated automatically from data. But one must say
to this, that HTML5 is more easy to use than LaTeX2e.


<h3 data-date="20160920" id="set-dict-joined"
>Joined datatypes map and set</h3>
<p>As sets are a special case of maps (dictionaries) and set operations
do not interfere with map operations, them can be joined.
Maps with values absent can be considered as sets:

<pre class="moss indent">
{1, 2} == {1: null, 2: null}
</pre>
<p>Multisets cannot be included as well, because
they introduce problems. For example, '<code>==</code>' behaves
differently if there are keys with <code>m[key]==0</code>.
But it is clear that maps may be used as internal data
structures of multisets. An alternative is, to simply monkey patch
the necessary operations into <code>Map</code>
(<code>Map</code> is the data type of maps).

<h3 data-date="20160930" id="assignment-to-application"
>Assignments to function applications</h3>
<p>A syntactical sugar for assignments to function
applications is added to the language.

<pre>
1. a.m()=y is equivalent to a.set_m(y)
2. a.m(x1,...,xn)=y is equivalent to a.set_m(x1,...,xn,y)
3. a.m(x) = y1,y2 the same as a.m(x)=[y1,y2]
     and therefore equivalent to a.set_m(x,[y1,y2])
4. a.m1(),a.m2() = t is not possible (t=[y1,y2])
5. a[i]()=y is not possible
</pre>
<p>The point in (4) is that the language should be minimalistic
and (4) would blow it up. It is definitely much harder to
implement than (1,2,3) which required less than 40 lines of code.


<h3 data-date="20161006" id="print-float"
>Printing floating point numbers</h3>

<p>There is a problem with standard printing of floating point
numbers. For example, one can get
<pre class="moss cmd-box">
&gt; list(0..1:0.2)
[0.0, 0.2, 0.4, 0.6000000000000001, 0.8, 1.0]
</pre>

<pre>
So we can have output of the form 000000000...some digit
and (under other circumstances)  999999999...some digit.
This is because of printf("%.16g\n",x).

In most cases one has engineering tasks and does not suffer
from slightly lower precision. So I think I will change that
to %.14g to make output more stable. One can always get full
precision by "{g16}"%[x] or even "{g17}"%[x].
(#include &lt;float.h&gt;: DBL_DECIMAL_DIG==17)
</pre>


<h3 data-date="20161107" id="Rust"
>Reimplementation in Rust</h3>

<p>It is clear for me now, that the Moss interpreter must be
rewritten in Rust. I&nbsp;have to struggle with segmentation faults
too often. The security goals are:

<p><b>Security (1).</b>
Maybe it is possible to achieve a memory safe implementation.

<p><b>Security (2).</b>
Access to files will be realized by a mandatory access control
system. In that system the main program obtains a <i>right</i> to
access files in some path. This right is given explicitly to the
subprograms that do the task. The difference to the flat model is,
that in the flat model a third party library routine can do anything,
once the main program got the right.

<p><b>Security (3).</b>
What makes the most headache is a general call of shell commands.
Any call of an external program (e.g. in a scripting language)
can undermine the access control system. Thus such a call is
ill behaved and shall only be possible in the <i>unsafe mode</i>.
Ideally, the unsafe mode is made forbidden outside of a
sandbox environment.

<p><b>Update (2018-03-22).</b>
The interpreter kernel is ported to Rust, it's construction was
successful and is is almost complete now.
There were some pitfalls, interesting ones, but it was possible to
take them into account. The most interesting pitfalls are:
<ul>
<li>The calling environment pointer <code>env</code> has to be given
to every Rust function that needs to call a Moss function or needs to
have access to the RTE (runtime environment). This is
<i>much less obfuscated</i> than handling global variables.
<li>A function has a pointer to the <code>gtab</code>
(table of global variables) of its module. And the module has a
pointer to this function. Therefore we have a cyclic data structure
that turns out to be a memory leak.
One could have used a weak pointer, but that would have made things
complicated. The best solution was to add a destructor at the
destruction of the interpreter that clears the gtabs.
A small difficulty remains: If a module shall be unloaded properly
<i>sooner</i> than at the ending of the main program,
this destructor must be called explicitly.
<li>The call stack is split in two parts: a frame stack and an
object stack. The frame stack is dynamic, but the object stack cannot
be made greater during runtime. One could use a
dynamic vector directly and indices instead
of slices. But the current design does not allow for that.
Secondly, it might affect the performance.
Giving the object stack's size to the interpreter in before is very
unelegant. The solution I have found, is simply to create a new
stack of the desired size and call a callback with this new stack.
This can be achieved at any point at runtime.
<li>The trait methods for <code>Drop</code>, <code>Eq</code>,
<code>Hash</code> cannot take <code>env</code>,
nor can they return error information. A solution I have found for
<code>env</code> is to store a RTE pointer in a table object
(the implementation is inside of <code>TableExtra</code>), and to
store a stack of alternative calling environments in the RTE.
This is my worst problem so far, but it only affects custom Moss
destructors and hashables.
</ul>
<p>Security goal (1) is achieved, the interpreter is memory safe,
provided Rust is sound, the Rust compiler produces safe code
and each used FFI (foreign function interface) is safe.
It is also possible to make it almost completely logically safe
in terms of overflow checks (there is a compiler option for that).
There are some remaining overflows from integer casts that should
be audited. Inline functions can be used to abstract this, making
the overflow checks optional.

<p>Security goals (2) and (3), running untrusted code by a
capability-based security model, are much harder to achieve,
because this security model is deeply connected to privateness
and immutability of data. For file access, a model with
sandbox directories seems to be, albeit less fine grained,
easier to achieve without loopholes.

<h3 data-date="20161107" id="self"
>New syntax for a formal self-argument</h3>

<p>The standard syntax for formal self-arguments
has a problem. The following is not possible,
bacause the inner self-argument shadows the outer one:
<pre class="moss indent">
Function.o = |f| |x| self(f(x))
</pre>
<p>One is forced to write instead:
<pre class="moss indent">
Function.o = fn|f|
  g = self
  return |x| g(f(x))
end
</pre>
<p>This problem occurs often if one uses methods, because
closures and higher order functions are frequently used.
Now the idea is, to separate the self-argument via an semicolon
from the other arguments. For actual arguments this syntax is
already possible, but I will provide it also for formal
arguments. Then we have:
<pre class="moss indent">
Function.o = |g;f| |x| g(f(x))
</pre>

<h3 data-date="20170509" id="about-modules"
>About modules</h3>

<p>What is the difference between what follows? Firstly:
<pre class="moss indent">
m = load("m")
</pre>
<p>And secondly:
<pre class="moss indent">
m = eval(read("m.moss"))
</pre>
<p>Behavior is different, because <code>eval</code>
returns a value rather than a module object. But the question that
comes into mind is: should they be equivalent? In order to achieve
that, in a module a module object should be returned explicitly rather
than implicitly. This would also solve another problem: How to
state a module that consists only of a single class or a single
function (e.g. to achieve advanced lazy loading and lazy
evaluation)? The problem here is an oddly looking import statement:
<pre class="moss indent">
use class_name: class_name
# vs.
use class_name
</pre>
<p>Note that <code>eval</code> can be made quite powerful. It can
take an additional argument that specifies information about
the environment. For example, global variable of the environment
are used by default by <code>eval</code>. If a module would be loaded,
<code>eval</code> had to take an empty environment.

<h3 data-date="20170509" id="default-arguments"
>Default arguments</h3>

<p>The interpreter already supports default arguments for
build in functions. Now a function's argument count can simply be
a range. Not given arguments will be filled out with
<code>null</code>. Now
<pre class="moss indent">
function f(x,y=expression)
</pre>
<p>is simply syntactic sugar for
<pre class="moss indent">
function f(x,y=null)
  if y is null then y=expression end
</pre>
<p>An implementation is straightforward:
<ol>
<li>Let argument count be a range.
<li>Take the assignment AST and obtain that desired if-AST from it.
<li>Insert or compile this if-AST before function body. To be more precise:
At first, the function body is parsed, and then we have both:
if-AST and body-AST.
</ol>
<p>Now construct (or compile in this order):
<pre class="indent">
* block-node
  * if-node-1
  * if-node-2
    ...
  * if-node-n
  * body-node
</pre>
<p>Easy going. At next, default named arguments are stated as follows:
<pre class="moss indent">
function f(x,m={})
  a = m["a"] if "a" in m else a0
  b = m["b"] if "b" in m else b0
  # ...
end
</pre>
<p>That's clumsy. I believe, default named arguments are very important
for usability and thus should be supported by the language. Now let
<pre class="moss indent">
{a=a0, b=b0} = m
</pre>
<p>be syntactic sugar for
<pre class="moss indent">
a = m["a"] if "a" in m else a0
b = m["b"] if "b" in m else b0
</pre>
<p>Without default arguments it should be more strict: Let
<pre class="moss indent">
{a,b} = m
</pre>
<p>be syntactic sugar for
<pre class="moss indent">
a = m["a"]; b = m["b"]
</pre>
<p>I call this the <em>map unpacking statement</em>.

<p>It took me 100 lines of C&nbsp;code to implement map
unpacking, including construction of a temporary variable if the right
hand side is an expression. I think it was a worthwhile effort.

<p>Finally it can be moved into the arguments list:
<pre class="moss indent">
function f(x,{a=a0,b=b0})
  # ...
end
</pre>
as syntactic sugar for
<pre class="moss indent">
function f(x,_m0_)
  {a=a0,b=b0} = _m0_
  # ...
end
</pre>

<p>Furthermore,
<pre class="moss indent">
function f([x,y])
  # ...
end
</pre>
<p>is syntactic sugar for
<pre class="moss indent">
function f(_t0_)
  x,y = _t0_
  # ...
end
</pre>

<p>In addition I achieved (by 30 lines of C&nbsp;code) syntactic sugar
for named actual arguments:
<pre class="moss indent">
f(x,y,a=e1,b=e2) ≡≡ f(x,y,{a=e1,b=e2})
</pre>
<p>They may appear in any order, independently from positional
arguments. That is a little more welfare than simply omitting
the curly brackets.

<h3 data-date="20170525" id="private-variables"
>Private variables</h3>

<p>At first I recall that
<pre class="moss indent">
begin ... end
</pre>
<p>is syntactic sugar for:
<pre class="moss indent">
fn|| ... end()
</pre>

<p>Often we want to create a local variable, use it in one or
more functions, and forget it afterwards. Thus we want to have
a <i>local scope</i>, so that the variable does not exist outside
of this scope. In Moss I have used this ugly construction so far:
<pre class="moss indent">
f = begin
  n = 42
  return |x| n*x
end
</pre>
<p>But if one wants to bind some value to more than one function,
this construction becomes even more unpleasant:
<pre class="moss indent">
f,g = begin
  n = 42
  f = |x| n*x
  g = |x| x+n
  return f,g
end
</pre>

<p>In Lua it is possible to restrict variables to a local scope:
<pre class="indent">
do
  local n = 42
  function f(x)
    return n*x
  end
  function g(x)
    return x+n
  end
end

print(f(2))
</pre>

<p>I did not realize until now that this is perfectly possible in
my own programming language too:
<pre class="moss indent">
begin
  global f,g
  n = 42
  f = |x| n*x
  g = |x| x+n
end

print(f(2))
</pre>
<p>Furthermore, this actually solves the problem of having variables
that are restricted to a module.<sup>1</sup> And fortunately these
variables can be accessed faster, since local variables are stored in
a stack frame rather than the map of global variables.

<p>A problem that remains is mutual recursion. In JavaScript this
is solved by making it possible to use a local variable that
is defined later on. For now, in Moss one would need to switch to
global variables for this purpose.

<p class="footnote">Footnote 1: It would be possible to achieve that
a variable may be declared to be local to a module (<i>module scope</i>).
In&nbsp;C known as a <i>static</i> variable. Such a variable would also
be stored inside an array rather than a map. But to me
<code>begin-end</code> is nicer and more powerful as it leads
to more fine-grained constructions.

<h3 data-date="20170924" id="use"
>Definition of the import statement</h3>

<p>In Moss, a module, for example <i>math</i>, is made available by
the following statement:
<pre class="moss indent">
use math
</pre>
<p>The implementation so far was an internal import-function that
added <i>math</i> to the map of global variables.
A change to this behavior will be proposed now. The import-statement
will be made syntactic sugar to:
<pre class="moss indent">
math = load("math")
</pre>
<p>This has the advantage that <i>math</i> can be a local variable
now. We recapitulate that a private variable is a (can be modeled
as a) local variable of a block (in Moss: <code>begin-end</code>).

<p>The full syntax is as follows:
<pre class="moss indent">
# (A)
use pathnode.pathnode.m: f,g

# (B)
use malias=pathnode.pathnode.m: falias=f, galias=g
</pre>
<p>This is defined to be syntactic sugar to:
<pre class="moss indent">
# (A)
m = load("pathnode/pathnode/m")
f = m.f
g = m.g

# (B)
malias = load("pathnode/pathnode/m")
falias = malias.f
galias = malias.g
</pre>
<p>In Addition:
<pre class="moss">
  use m:*
# is meant to be
  m = load("m")
  gtab().update(record(m))

# and

  use(m): f, g
# is meant to be (without load)
  f = m.f; g = m.g
</pre>


<h3 data-date="20170930" id="assert"
>Assert statements</h3>

<p>The assert statement was added to the language:
<pre class="moss indent">
assert condition

assert condition, text
</pre>
<p>It is implemented as syntactic sugar, because <code>text</code>
shall be lazily evaluated. So we have:
<pre class="moss indent">
if not condition
  assertion_failed(text)
end
</pre>
<p>Example of usage:
<pre class="moss indent">
function pow(x,n)
  assert n: Int and n&gt;=0, "pow(x,n), n: Int, n&gt;=0"
  y=1
  for k in 1..n
    y=y*x
  end
  return y
end

print(pow(2,-2))
# Assertion failed: pow(x,n), n: Int, n&gt;=0.
</pre>

<p>A failed assertion results in an ordinary exception
that is shown together with a stack trace.

<p><b>Update</b>. Maybe it is a good idea to enable compilation
of assert statements only in debug mode. Debug mode will be
switched on by "<code>moss -d</code>". So, if something goes
wrong and a long stack trace is returned, debug mode could be
turned on to inspect the situation further.

<h3 data-date="20171024" id="embedded-slicing-ability"
>Embedded slicing ability</h3>

<p>If we have a string <code>s</code>, it is expensive to
create a slice <code>s[i..j]</code>. But as <code>s</code> is
immutable, a slice object could be returned, without copying data.
Now we can make every string a slice object, if we say we have a
immutable data array and a <code>(pointer,len)</code> to a part of it.

<p>At first this contradicts with the string being a struct with
a flexible array last member. We would need a double allocation.
At next, the data array has to contain a reference counter.
Ideally the data array is a struct with a flexible array last member.
Not to forget that the string object itself needs an independent
reference counter.

<p>This sounds more complicated. So what have we won? Now we can
take slices and slices of slices without the need of allocating
and copying around data. Take into mind the basic algorithm that
searches a substring in a string.

<p>Interestingly this is an implementation detail that is
transparent to the programming language because strings are
chosen to be immutable.

<p>Moving further, such a behavior is also interesting for
dynamic arrays (type <code>List</code> in Moss). If a slice
is obtained from an array, the arrays length should become immutable.
The information about immutable length, immutable data and
slicing can be modeled as an option type (extra behavior flag),
to separate it from the standard behavior. A problem is again,
that the data array needs an independent reference counter.

<p>Alternatively, we could have a sum type (a tagged union)
that chooses whether to point to data or to slice another array.

<p>So, what have we won? Let's take a look on some naive algorithms:
<pre class="moss indent">
# Naive quicksort
qsort = |a| ([] if len(a)==0 else
  qsort(a[1..].filter(|x| x&lt;a[0]))+[a[0]]+
  qsort(a[1..].filter(|x| x&gt;=a[0])))

# Naive sieve of Eratosthenes
sieve = |a| ([] if len(a)==0 else
  [a[0]]+sieve(a[1..].filter(|x| x%a[0]!=0)))
</pre>
<p>Many huge copies are created by <code>a[1..]</code>.
The algorithms could be made a bit more quick and memory
friendly, but it hardly is worthwhile as these algorithms are
terribly inefficient.

<h3 data-date="20171120" id="null-coalescing"
>Null coalescing operator</h3>

<p>In Moss, the index operations <code>a[i]</code>, <code>m[key]</code>
are strict. If <code>i</code> is out of bounds or <code>key</code>
is not found, an exception will be thrown. Now we could introduce
sloppy index operations <code>a(i)</code>, <code>a(key)</code>,
that return <code>null</code> if <code>i</code> is out of bounds or
<code>key</code> is not found. That's right, we simply overload the
function call operator.

<p>Furthermore we introduce the null coalescing operator as
"<code>a or else b</code>". Now these to statements are
semantically equivalent:

<pre class="moss indent">
y = m[key] if key in m else x

y = m(key) or else x
</pre>

<p>In both statements, <code>x</code> is lazily evaluated.


<h3 data-date="20171120" id="reflection"
>Better reflection support</h3>

<p>In Moss, there is the member access operation "<code>a.x</code>".
One can have reflection this way:

<pre class="moss indent">
y = record(a)["x"]
</pre>

<p>Here the problem emerges, that the ordinary index operation
does not respect the prototype chain. Now we find, that an
expression "<code>a.x</code>" is parsed into an AST
<code>(dot a "x")</code>. But the compiler
ever since the beginning was able to compile the more general
AST <code>(dot a x)</code> where <code>a</code> and <code>x</code>
are arbitrary expressions. The recursive descent may simply take an
atom after the dot. Thus I will introduce the general syntax
"<code>a.(x)</code>". So, adding very few lines to the compiler allows
us nice reflection with respect to the prototype chain. For clarity,
we have:

<pre class="moss indent">
a.x ≡≡ a.("x")
</pre>

<h3 data-date="20180326" id="the-metaclass-patch"
>The metaclass patch</h3>

<p>The basic idea for the object system of Moss is so far, that
the type and prototype of an object coincide. A property
(including methods) is searched in the object first,
then in the object's prototype, and then in the prototype's
prototype and so on until <code>null</code> is reached.
This simple model is shown by this graph:

<div class="img">
<img src="../img/prototype-chain.png" style="width: 100px">
</div>

<p>Now, the problem arises that a type should have an own
object-to-string method. But placed somewhere in the prototype chain,
it will conflict with the object-to-string method for the type's
instances. A solution is to obtain the object-to-string method
from the object's type. But in order to do that, the type-prototype
coincidence must be removed.

<p>Now, the idea is, not to change the object system, but to
patch the coincidence breakage into it. A table object is constructed
as follows:

<pre class="moss indent">
signature = prototype

t = table signature{x=value, y=value}
 ≡≡ table signature({x=value, y=value})
</pre>

<p>We can have multiple inheritance:
<pre class="moss indent">
signature = [prototype1, prototype2, ..., prototypeN]
</pre>

<p>Now, a tuple is used to differentiate between a type and
a prototype:
<pre class="moss indent">
signature = (type, object_name, prototype)
</pre>
<p>This leads to the following model:
<div class="img">
<img src="../img/type-chain.png" style="width: 280px">
</div>

<p>The patched type system looks as follows:
<div class="img">
<img src="../img/type-model.png" style="width: 320px">
</div>

<p>To make things easy, property access only searches the prototype
chain. A complicated rule "one left then upwards" will not be used.

<p>For object-to-string, the type name must be stored somewhere,
and it should be easy to create a named class. For convenience
the tuple is extended by optional elements. The complete signature
is:
<pre class="moss indent">
signature = (type, object_name, prototype, hidden_properties)
</pre>

<p>A simple example:
<pre class="moss indent">
Bird = table(Type,"Bird"){
   function string
      "{} is a bird." % [self.name]
   end,
   function fly
      "{} can fly!" % [self.name]
   end
}

Duck = table(Type,"Duck",Bird){
   function string
      "{} is a duck." % [self.name]
   end,
   function dive
      "{} can dive!" % [self.name]
   end
}

d = table Duck{name = "Donald"}

print(d)
print(d.fly())
print(d.dive())
print("type: ", type(d))

# Output:
# Donald is a duck.
# Donald can fly!
# Donald can dive!
# type: Duck
</pre>

<h3 data-date="20180327" id="proper-lexical-scoping"
>Proper lexical scoping</h3>

<p>Not possible in Moss so far is proper lexical scoping.
<i>Proper lexical scoping</i> is a closure capture of an external local
variable from lexical scope by mutable reference. The local variable's
lifetime is increased from <code>'scope</code> to
max(<code>'scope</code>,&nbsp;<code>'closure</code>).

<p>In Moss, lexically scoped closures are possible, but by capture
per cloning. Not possible so far is such a construct:
<pre class="moss indent">
function main
  s = 0
  (1..4).each(fn|k|
    s = s+k
  end)
  print(s)
end
</pre>

<p>The outer and inner <code>s</code> are two different variables
because of a cloning at closure creation. Thus, the outer
<code>s</code> will not be modified. How to solve this problem?

<p>At first let me explain how I implemented closures.
I will use
<pre class="moss indent">
f = |x,y| |z| x+y+z
</pre>

<p>as an example to examine what is happening.
This is transformed into the following pseudo-Moss:
<pre class="moss indent">
f = fn|x,y|
  _t = [x,y]
  return fn(_t)|z| t[0]+t[1]+z end
end
</pre>

<p>After transformation one can see why nothing happens:
<pre class="moss indent">
function main
  s = 0
  _t = [s]
  (1..4).each(fn(_t)|k|
    _t[0] = _t[0]+k
  end)
  print(s)
end
</pre>

<p>Now, the idea is to regard the situation as a move of
<code>s</code> into <code>_t</code>. Thus also in outer scope,
we need to replace every occurrence of a captured variable
by <code>_t[i]</code>. In this case, <code>print(s)</code>
is replaced by <code>print(_t[0])</code>.

<p>Closure chains are not problematic:
<pre class="moss indent">
function main
  s = 0
  _t = [s]
  (1..4).each(fn(_t)|k|
    _t[0] = _t[0]+k
  end)
  _t = [_t[0]]
  (1..4).each(fn(_t)|k|
    _t[0] = _t[0]+k
  end)
  print(_t[0])
end
</pre>

<p>Closure nesting is more problematic:
<pre class="moss indent">
function main
  s = 0
  _t1 = [s]
  (1..4).each(fn(_t1)|i|
    _t2 = [_t1[0]]
    (1..4).each(fn(_t2)|j|
      _t2[0] = _t2[0]+i*j
    end)
    # lifetime of _t2 ends here
  end)
  print(_t2[0])
end
</pre>

<p>This is not possible, because the lifetime of <code>_t2</code>
is not long enough. There is more than one possible solution
to this problem. We have to take in mind that all of this
is about lexical scoping. Because of this situation, we could
simply move <code>_t2</code> into the outmost local scope:

<pre class="moss indent">
function main
  s = 0
  _t1 = [s]
  _t2 = []
  (1..4).each(fn(_t1)|i|
    _t2.push(_t1[0])
    (1..4).each(fn(_t2)|j|
      _t2[0] = _t2[0]+i*j
    end)
  end)
  print(_t2[0])
end
</pre>

<p>Again, difficulties arise when nesting and chaining are combined.


<h3 data-date="20180406" id="auto-unpacking-removed"
>Auto unpacking removed</h3>

<p>For convenience, in some higher order functions there was
automatic list unpacking:

<pre class="moss indent">
scalar_product = |v,w| zip(v,w).sum(|x,y| x*y)
               = |v,w| zip(v,w).sum(|t| t[0]*t[1])
</pre>

<p>This is not possible in general and thus is
removed in favor of explicit unpacking:
<pre class="moss indent">
scalar_product = |v,w| zip(v,w).sum(|[x,y]| x*y)
</pre>

<h3 data-date="20180406" id="argument-list-unpacking"
>Argument list unpacking</h3>

<p>For argument list unpacking there was so far:
<pre class="moss indent">
f(1,2) ≡≡ f.apply([1,2])
</pre>

<p>This approach has the drawback that self arguments must
be given explicitly:
<pre class="moss indent">
x.m(1,2) ≡≡ x.m.apply(x;[1,2])
  /*but not*/ x.m.apply([1,2])
</pre>

<p>Due to this reason, <code>f.apply(a)</code> is replaced
by <code>f(*a)</code>.

<p>Surprisingly, the implementation patch
was very short and took me only 30 min. I added the unary prefix operator
"<code>*</code>" to the recursive descent at the same level
as the unary prefix operators "<code>+ - ~</code>". Now in AST
compilation we match <code>splat</code> in these ASTs:
<pre class="indent">
  (apply f (splat (list 1 2))),
  (apply (dot x "m") (splat (list 1 2))),
  (apply (dot x "m") x (splat (list 1 2))),
</pre>
<p>and branch to compilation of unpacking apply. There we take
explicit and implicit self arguments into account again.
A new byte code <code>APPLY</code> is added to the interpreter.
This byte code calls a very short function that takes
<code>f,self,a</code> from the stack and calls the Rust-Moss
transition <code>env.call(f,self,a)</code> where <code>env</code>
is a pointer to the calling environment. The very same behavior
was in <code>f.apply(self,a)</code>.

<p>In before I mused about alternative approaches.
One could have unpacked to the object stack and taken a dynamic
argument count from the object stack. But firstly this would
have made calling slower and secondly would have lead to
stack overflow in case of large lists.

<p>The following behavior is not implemented at this point of time:
<pre class="moss indent">
f(*a,*b) ≡≡ f(*(a+b)),
f(x,y,*a) ≡≡ f(*([x,y]+a))
etc.
</pre>

<p>Thus we need to use the right hand side.

<h3 data-date="20180503" id="table-literal"
>Making table literals orthogonal</h3>

<p>The function call
<pre class="moss indent">
object(prototype,properties)
</pre>
<p>is replaced by
<pre class="moss indent">
table prototype(properties)
</pre>
<p>Thus we have
<pre class="moss indent">
T = table{}
m = {x=1,y=2}
table{x=1,y=2}   ≡≡ table null(m)
table T{x=1,y=2} ≡≡ table T(m)
</pre>

<h3 data-date="20180709" id="list-comprehensions"
>List comprehensions</h3>

<p>In the last week I mused about adding generator comprehensions
to the language. From that we receive list, set and dictionary
comprehensions as a gift.

<p>The most simple implementation is reduction to syntactic sugar.
For example

<pre class="moss indent">
list(f(x) for x in a)
</pre>

<p>will be transformed into:
<pre class="moss indent">
list(fn*|| for x in a do yield f(x) end end)
</pre>

<p>The more complicated expression
<pre class="moss indent">
list(f(x,y) for x in a if p(x) for y in b if q(x,y))
</pre>

<p>will be transformed into:
<pre class="moss indent">
list(fn*||
  for x in a
    if p(x)
      for y in b
        if q(x,y)
          yield f(x,y)
        end
      end
    end
  end
end)
</pre>

<p>This could be done directly during syntactic analysis,
and done elegantly, the compiler would become only slightly
slightly larger by 100 up to 200 lines.


<h3 data-date="20180802" id="security-model"
>A first security model</h3>

<p>After musing for some time about a capability based security
model, I decided to compose a model of irreversible restrictions
instead.

<p>Capabilities are the most fine grained model, but are complicated
to use because a system environment object has to be given to every
function that shall have rights for system access. And this object
has to be invisible for other functions. It would be a security hole,
if this object is a global variable that could be made visible by
an untrusted module.

<p>Because of the emerging complexity, I decided to use a simpler
security model, which allows system access in the old fashion.
Basically, every system access needs to have a capability (a right,
a permission), which is stored in <code>rte</code>, the internal
runtime environment used in the interpreter. As per default, any file
can be read, but all other system access is prohibited. But running
"<code>moss -unsafe</code>" instead of "<code>moss</code>" enters
root mode, allowing for everything. Now, calls to the runtime system
(ordinary Moss functions) place irreversible restriction locks,
that cannot be unlocked anymore. There might be different of such
locks, for example for running shell commands, writing/reading
files, network access and so on. Note that unrestricted call of
shell commands implies writing files and network access too.

<p>If such first few lines of a Moss program are written
in a standard style, it is very easy to reason about what the
program is allowed to and what not. The interface that these
few lines provide, should be as easy and failure tolerant
as possible. All default parameters should perform the most
restriction.

<p>The insistent drawback of this system is, that it is insecure
to load untrusted modules in an authorized program. That is,
one cannot have untrusted modules and authorization at the same
time.

<h3 data-date="20181115" id="destructors"
>Destructors, getters, setters</h3>

<p>So, implementing custom getters and setters is not very difficult,
as I have found. Basically one provides a new class object from
a class constructor, but this is an <code>Object::Interface</code>
instead of an <code>Object::Table</code>. Let me explain,
<code>Interface</code> is the residual enum variant that contains
a dyn trait pointer, i.e. is the interface to all different kinds
of objects, for example long integers, multidimensional arrays,
file objects etc.

<p>If a table object has such a class object <code>A</code> as its
prototype, the behavior of the dot operator will be determined by
methods of <code>A</code>. Ideally, the additional behavior is shadowed
by a branch on <code>Object::Interface</code>, i.e. against a simple
integer loaded from a pointer. That's a very small runtime penalty.

<p>Implementing custom destructors is more difficult. Here the
problem arises that function calls need a reference to the calling
environment <code>env</code>. This reference must be given as an
argument to the destructor. But objects are designed to be destructed
everywhere. A custom <code>Drop</code> may be implemented, but
<code>drop</code> takes no additional arguments. Linear typing could
provide additional arguments, but this leads to very ugly code
and changes the overall design.

<p>The solution I came up with is as follows. A class object
<code>A</code> contains an Rc-pointer to the runtime environment
<code>rte</code>. If an object is a child of <code>A</code>, by
calling <code>drop</code> it will be stored togehter with its
destructor in a buffer inside of <code>rte</code>. A flag of type
<code>Cell&lt;bool&gt;</code> inside of <code>rte</code> will be
set, indicating a non-empty buffer. Now, when returning from a
function, after a branch on the flag, the delayed destructions
are processed, because we have access to <code>env</code>.

<p>But note, branching at this point is particularly time critical.
Any additional code will affect the calling mechanism and thus
the general interpreter performance. So, one branch on a
<code>Cell&lt;bool&gt;</code> behind a pointer to a struct
is bearable, but not more. But wait, we can do better.

<p>To circumvent this, there is a slight modification of this technique.
A secondary calling environment will be stored inside of
<code>rte</code>. A flag in <code>rte</code> indicates whether
we are in a root destructor. All custom sub-destructions will be
stored in the buffer. After returning from all drops, the buffer will
be processed in the root destructor with the secondary calling
environment. We need to do it this way, because otherwise
sub-destructions would need a third calling environment,
sub-sub-destructions a fourth calling environment and so on.
Don't get confused, but I would consider it somewhat similar
to trampolining tail calls.

<h3 data-date="20190212" id="type-system"
>A type system</h3>

<p>A typed programming language Moss is planned, the compiler
producing Moss byte code. The syntax will be so similar that both
languages will have the same file extension. The typed Moss will
only have a few more keywords. For comparison, an example:

<pre class="moss indent">
function map(a,f)
   b = []
   for x in a
      b.push(f(x))
   end
   return b
end

function map[X,Y,n](a: List[X,n], f: X=&gt;Y): List[Y,n];
   let mut b: List[Y] = [];
   for x in a do
      b.push(f(x));
   end
   return b;
end
</pre>

<p>The dynamic Moss is actually more general, emulated by:
<pre class="moss indent">
function map(a: List[Object], f: Object=&gt;Object): List[Object];
   let mut b: List[Object] = [];
   for x in a do
      b.push(f(x));
   end
   return b;
end
</pre>

<p>Another example:
<pre class="moss indent">
let qsort[T: Ord, n](a: List[T,n]): List[T,n] =
   [] if a==[] else
      qsort(a[1..].filter(|x| x&lt;a[0]))+[a[0]]+
      qsort(a[1..].filter(|x| x&gt;=a[0]));
</pre>

<h3 data-date="20190314" id="leftover-named-arguments"
>Preventing leftover named arguments</h3>

<p>Checking for leftover named arguments was very unergonomic so far.
The most flexible design I have figured out employs a wrapper type
<code>Drain</code>, which depletes the argument map by operator
overloading. This approach is also compatible with default arguments.

<pre class="moss indent">
use unpack: drain, assert_empty

argm = {x=1,y=2,z=3}
{x,y} = drain(argm)

assert_empty(argm)
# Value error: unexpected named arguments: {"z": 3}.
</pre>

<p>The unpacking may be splitted into parts:
<pre class="moss indent">
argm = {x=1,y=2}
dargm = drain(argm)
{x} = dargm
{y} = dargm
assert_empty(argm)
</pre>

<p>The unpacking may drain a copy, leaving the original
argument map untouched:
<pre class="moss indent">
m = copy(argm)
{x,y} = drain(m)
assert_empty(m)
</pre>

<p>To my pleasure, being a library feature, it holds the
interpreter kernel smaller.

<h3 data-date="20191021" id="classes"
>First class support for classes</h3>

<p>So, with the introduction of classes, Moss has got a second
slightly different object system. Now this system was made the
primary object system, as I have found ordinary named types to be the
most common pattern. The prototype based object system is just used
very infrequently. Furthermore, the prototype system was unified with
the class system, which means that both approaches may be mixed.

<p>For the sake of convenience, a new class literal syntax is
introduced:

<pre class="moss indent">
class Duck = {
   function quack()
      print(self.name, " quacks.")
   end
}

d = table Duck{name = "Dagobert"}
d.quack()
</pre>

<p>More generally:
<pre class="moss indent">
class Name = map_object
class Name: Parent = map_object
class Name: [Parent1,Parent2,...] = map_object
</pre>

<p>where <code>Parent</code> is an atomic expression
and <code>map_object</code> is an expression.
Or as an expression:
<pre class="moss indent">
class name_string: parent_signature map_object
</pre>
<p>where <code>name_string</code>, <code>parent_signature</code>
and <code>map_object</code> are atomic expressions.

<p>The syntax is just syntactic sugar for:
<pre class="moss indent">
class_constructor(name_string,parent_signature,map_object)
</pre>

<p>So the first example is just:
<pre class="moss indent">
Duck = class_constructor("Duck",null,{
   "quack": fn quack||
      print(self.name, " quacks.")
   end
})
</pre>

<h3 data-date="20191027" id="copy"
>Deep copy moved out</h3>

<p>The algorithms for deep copy can become quite complicated.
For example, when there is a non-tree-like graph, the possibility of
respecting the graph structure emerges. The operations in such
algorithms are actually handled quite well in Moss. For these reasons
I have decided to move the functionality out of the interpreter into
a library. That makes the interpreter a bit smaller again.

<h3 data-date="20191120" id="unicode-identifiers"
>Unicode identifiers</h3>

<p>Concerning Unicode identifiers, these were prohibited until now in
order not to open the door to homoglyph attacks. It was unclear to me
how to deal with them. However, the problem is already present in that
strings are also affected, of which the program may be dependent in a
sensitive way. Thus the Pandora's box is already open, so to speak.
In some editors it may also be possible to hide code in the carriage
return or in overlong lines. In addition, ASCII-only does not
prevent typosquatting.

<p>For these reasons, as I believe, it makes more sense to check files
with an external tool. Such a tool would also be able to scan an entire
directory.

<p>Therefore I am inclined to allow Unicode for identifiers as well.
For the sake of simplicity this concerns all code points greater
than 127. A remaining question is, whether Unicode should be the
default mode or be enabled by a command-line option. The former is
more convenient while the latter is safer.  As ASCII-only input
in default mode would be a strong convenience regression, it seems
better to me to allow Unicode in default mode. A bad stomach feeling
remains.


</body>
</html>

