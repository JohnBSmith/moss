<!DOCTYPE html>
<html>
<head>
  <meta charset="UTF-8">
  <title>Graphics</title>
  <link href="../css/main.css" rel="stylesheet">
  <script src="../js/moss-syntax.js"></script>
</head>
<body>

<table class="navigation">
<tr><td><b>&uarr;</b> <a href="toc.htm">Up</a>
</table>
<h1>Graphics</h1>

<div class="toc">
<h2 id="toc">Table of contents</h2>
<ol>
<li><a href="#gx">Module <code>gx</code> &mdash; computer graphics</a>
<li><a href="#plotlib">Module <code>plotlib</code> &mdash; graphing data and functions</a>
<li><a href="#plotlib-implicit">Module <code>plotlib.implicit</code> &mdash; graphing zero sets</a>
</ol>
</div>

<h2 id="gx">Module gx</h2>
<p>Computer graphics interface.

<dl class="code">
<dt>sleep(x)
<dd>Sleep <code>x</code> seconds. Note that <code>x</code> may
be a floating point number und thus parts of a second are possible.
</dl>

<h3>gx.canvas</h3>
<dl class="code">
<dt>canvas(w,h)
<dd>Create a new canvas of width <code>w</code> and
height <code>h</code> pixels.

<dt>c.clear(r,g,b)
<dd>Clear the canvas <code>c</code> by RGB color.
Note: <code>r,g,b</code>&in;[0,1].

<dt>c.flush()
<dd>Flush the written data of canvas <code>c</code> to the screen.
This operation is somewhat time consuming and thus should
not be done before a larger bunch of pixels is drawn.

<dt>c.fill(x,y,w,h)
<dd>Fill a rect of width <code>w</code> and height <code>h</code>
pixels at pixel <code>(x,y)</code>.

<dt>c.rgb(r,g,b,a=1)
<dd>Set the color state using the RGB color model.
Note: <code>r,g,b,a</code>&in;[0,1].

<dt>c.hsl(h,s,l)
<dd>Set the color state using the HSL color model.
Note: <code>h</code>&in;[0,2&pi;] and <code>s,l</code>&in;[0,1].

<dt>c.key()
<dd>Pick the next key of the keyboard input queue.

<dt>c.point(x,y)
<dd>Draw a smooth point at position <code>(x,y)</code>.
This operation uses the device independent coordinate system
instead of pixel coordinates.

<dt>c.circle(x,y,r)
<dd>Draw a circle of radius <code>r</code> at position
<code>(x,y)</code>. This operation uses the device independent
coordinate system instead of pixel coordinates.

<dt>c.disc(x,y,r)
<dd>Draw a disc of radius <code>r</code> at position
<code>(x,y)</code>. This operation uses the device independent
coordinate system instead of pixel coordinates.

<dt>c.box(x,y,r)
<dd>Draw a box of incircle radius <code>r</code> at position
<code>(x,y)</code>. This operation uses the device independent
coordinate system instead of pixel coordinates.

<dt>c.scale(sx,sy)
<dd>Set the scale of the device independent coordinate system.

<dt>c.origin(x,y)
<dd>Set the origin of the device independent coordinate system.

<dt>c.vflush()
<dd>Flush the vector graphics buffer.

<dt>c.vcflush()
<dd>Flush and clear the vector graphics buffer.
</dl>

<h2 id="plotlib">Module plotlib</h2>
<p>Graphing data and functions.

<p>A basic example:

<pre class="moss indent">
use plotlib: system
use math: pi, sin

s = system()
s.plot(|x| sin(pi*x))
s.idle()
</pre>

<h3>plotlib.system</h3>
<dl class="code">
<dt>system({w=960, h=640, n=1000, scale=1, px=0, py=0,<br>
wx=10/scale, wy=10/scale, dark=false, grid=true,<br>
alignx="center", aligny="center"})
<dd>Create a new coordinate system with center <code>(px,py)</code>
where the visible range is <code>x&in;[px-wx,px+wx]</code>
and <code>y&in;[py-wy,py+wy]</code> by assuming <code>w==h</code>.
The resolution will be <code>w*h</code> pixels.

<dt>s.idle()
<dd>Idle until <code>"q"</code> (quit) is pressed.

<dt>s.plot(f,{n=s.n})
<dd>Graph a function <code>f</code> as <code>y=f(x)</code>,
using <code>n</code> points for <code>x&in;[px-wx,0]</code> and
<code>n</code> points for <code>x&in;[0,px+wx]</code>.

<dt>s.vplot(f,{n=s.n, t0=0, t1=2*pi})
<dd>Graph a vector curve <code>f</code> as <code>[x,y]=f(t)</code>
using <code>n</code> points for <code>t&in;[t0,t1]</code>.

<dt>s.cplot(f,{n=4})
<dd>Graph a complex function <code>f</code> as <code>w=f(x+y*1i)</code>
where the color (HSL) is <code>H=arg(w)</code> and
<code>L</code> depends on <code>abs(w)</code>. The integer number
<code>n</code> is the raster size in pixels. 

<dt>s.line(p1,p2)
<dd>Draw a line from <code>[x1,y1]=p1</code> to <code>[x2,y2]=p2</code>.

<dt>s.vector(p1,p2)
<dd>Draw a vector arrow from <code>[x1,y1]=p1</code>
to <code>[x2,y2]=p2</code>.

<dt>s.scatter(a,{type="disc", radius=0.008})
<dd>Draw a list scatter points <code>[x,y]=a[k]</code>.
The <code>type</code> is <code>"disc"</code>, <code>"circle"</code>
or <code>"box"</code>.

<dt>s.animte(callback,{clear=true})
<dd>Animate <code>callback(tstep)</code> until <code>"q"</code> (quit)
is pressed. The argument <code>tstep</code> is a stroboscope that
you can scale to obtain your preferred time parameter.
Note that if the FPS is too slow, you might want to compute
an animated gif instead. That is currently not supported, but planned for
the future.
<dd>

<dt>s.lock_color(lock=true)
<dd>After <code>s.plot(f)</code> and <code>s.vplot(f)</code>
the color is changed automatically to the next one in the palette.
This is turned off by <code>s.lock_color()</code> in order
to achieve unimpaired manual control over the color state.
Note that <code>s.animate(callback)</code>
automatically applies <code>s.lock_color()</code>.

<dt>s.color(n)
<dd>Set the color state. Use color <code>n&ge;0</code> from
the color palette. If <code>n</code> is out of bounds,
<code>n%size</code> is used.

<dt>s.rgb(r,g,b)
<dd>Set the color state by the RGB color model.

<dt>s.hsl(h,s,l)
<dd>Set the color state by the HSL color model.

<dt>s.palette
<dd>The color palette, containing <code>[r,g,b]</code> colors.
A random color is picked this way:
<pre class="moss">
rng = rand(s.palette)
s.rgb(*rng())
</pre>
</dl>

<h2 id="plotlib-implicit">Module plotlib.implicit</h2>
<p>Patches plotlib with functionality to draw zero sets.

<p>A basic example:
<pre class="moss indent">
use plotlib: system
use plotlib.implicit

s = system()

s.plot_zero_set(|x,y| x^2-y^2-1)

s.idle()
</pre>

<dl class="code">
<dt>s.plot_zero_set(F,{n=1000,m=10,method="bisection"})
<dd>Draw the solutions of <code>F(x,y)=0</code>.
A large line density needs a large <code>m</code>.
If there are gaps, try to increase <code>m</code> to 20 or 100.

<dt>s.plot_level(F,{n=4,freq=1,alpha=0.4})
<dd>Draw <code>z=F(x,y)</code> by color. The color change frequency
is given by <code>freq</code>. Alpha blending is adjusted by
<code>alpha</code>. The integer number
<code>n</code> is the raster size in pixels.
</dl>

</body>
</html>

