<!DOCTYPE html>
<html>
<head>
  <meta charset="UTF-8">
  <title>Algorithms</title>
  <link href="../css/main.css" rel="stylesheet">
  <script src="../js/moss-syntax.js"></script>
</head>
<body>

<table class="navigation">
<tr><td><b>&uarr;</b> <a href="toc.htm">Up</a>
</table>
<h1>Algorithms</h1>

<div class="toc">
<h2 id="toc">Table of contents</h2>
<ol>
<li><a href="#itertools">Module <code>itertools</code> &mdash; functions that create iterators</a>
<li><a href="#functional">Module <code>functional</code> &mdash; functional programming</a>
</ol>
</div>

<h2 id="itertools">Module itertools</h2>
<p>Functions that create iterators.

<dl class="code">
<dt>chain(*iterables)
<dd>Lazy evaluation of <code>iter(iterables.sum(list))</code>.
<pre class="moss">
&gt; chain(1..2,1..4).list()
[1, 2, 1, 2, 3, 4]
</pre>

<dt>prod(*iterables)
<dd>Return an iterator over the cartesian product of the iterables.
<pre class="moss">
&gt; prod(["x","y"],[0,1]).list()  
[["x", 0], ["x", 1], ["y", 0], ["y", 1]]
</pre>

<dt>permutations(a)
<dd>Return an iterator over all permutations of <code>a</code>.
The permuations are emitted in lexicographical order.
<pre class="moss">
&gt; permutations("abc").map(|t| t.join()).join("|") 
"abc|bac|bca|acb|cab|cba"
</pre>

<dt>combinations(a,k)
<dd>Return an iterator over all <code>k</code> length
combinations of <code>a</code>. The combinations are emitted
in lexicographical order.

<dt>repeat(x), repeat(x,n)
<dd>Return an iterator that returns <code>x</code> over and over
again. If <code>n</code> is given, the iterator will be exhausted
after <code>n</code> calls.

<dt>i.step(m)
<dd>Returns an iterator that steps by skipping elements:
<pre class="moss">
a.step(m).list() == [a[0],a[m],a[2*m],...]
</pre>
</dl>

<h2 id="functional">Module functional</h2>
<p>Functional programming.

<dl class="code">
<dt>fix(m,F)
<dd>Memoizing fixed point combinator.
<pre class="moss">
fib = fix({},|f,n| 1 if n==1 or n==2 else f(n-1)+f(n-2))

fib = fix({1: 1, 2: 1}, |f,n| f(n-1)+f(n-2))
</pre>

<dt>lazy(|| expression)
<dd>Create a new lazily evaluated expression. Evaluation of a
such an expression <code>x</code> is done by <code>x.value()</code>.
The expression is evaluated only once, the result then memoized for
subsequent calls.

<dt>Lazy
<dd>Data type of lazily evaluated expressions.
</dl>

</body>
</html>

