<!DOCTYPE html>
<html>
<head>
  <meta charset="UTF-8">
  <title>Exceptions</title>
  <link href="../css/main.css" rel="stylesheet">
  <script src = "../js/moss-syntax.js">
  </script>
</head>
<body>

<table class="navigation">
<tr><td><b>&uarr;</b> <a href="toc.htm">Up</a>
</table>
<h1>Exception handling</h1>
<div class="toc">
<h2>Table of contents</h2>
<ol>
<li><a href="#formalism">Raising and catching</a>
<li><a href="#destructors">Destructors</a>
</ol>
</div>

<h2 id="formalism">Raising and catching</h2>
<p>In the following an exception of type <code>E</code>
is thrown an then catched.

<pre class="moss indent">
class E = {}

try
   raise table E{text = "Some message"}
catch e if e: E
   print(e.text)
end
</pre>
<p>The catch-part is only reached if the exception is of
type <code>E</code>. It can also be stated by means of
an unconditional catch.

<pre class="moss indent">
try
   raise table E{text = "Some message"}
catch e
   if e: E
      print(e.text)
   else
      raise e
   end
end
</pre>

<p>But in case of an unconditional catch, the traceback so far
will be clipped off.


<h2 id="destructors">Destructors</h2>

<p>Destructors are called automatically during stack unwinding.
The following program demonstrates the behavior.

<pre class="moss indent">
class E = {}

class Duck = {
   function drop()
      print("A duck flies away.")
   end
}

function subroutine()
   d = table Duck{}
   raise table E{text = "Error"}
end

try
   subroutine()
catch e if e: E
   print(e.text)
end
</pre>

<p>The output is produced always in this order:
<pre class="indent">
A duck flies away.
Error
</pre>

</body>
</html>

