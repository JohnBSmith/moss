<!DOCTYPE html>
<html>
<head>
  <meta charset="UTF-8">
  <title>Functional programming</title>
  <link rel="stylesheet" href="../css/main.css">
  <script src = "../js/moss-syntax.js">
  </script>
</head>
<body>

<table class="navigation">
<tr><td><b>&uarr;</b> <a href="toc.htm">Up</a>
</table>
<h1>Functional programming</h1>

<div class="toc">
<h2 id="toc">Table of contents</h2>
<ol>
<li><a href="#higher-order-functions">Higher order functions</a>
  <ol>
  <li><a href="#map">Map</a>
  <li><a href="#filter">Filter</a>
  <li><a href="#reduce">Reduce</a>
  <li><a href="#count">Count</a>
  </ol>
<li><a href="#transformations">Transformations</a>
  <ol>
  <li><a href="#zip">Zip</a>
  </ol>
<li><a href="#comprehensions">Comprehensions</a>
  <ol>
  <li><a href="#preliminary-remark">Preliminary remark</a>
  <li><a href="#list-comprehensions">List comprehensions</a>
  <li><a href="#set-comprehensions">Set comprehensions</a>
  <li><a href="#map-comprehensions">Map comprehensions</a>
  <li><a href="#generator-comprehensions">Generator comprehensions</a>
  </ol>
</ol>
</div>


<h2 id="higher-order-functions">Higher order functions</h2>

<p>A function is called a <i>higher order function</i> if it
takes a function as its argument or returns a function as its
result. The data types <code>List</code> and <code>Iterable</code>
already provide a number of such functions. The most well known
are <code>map</code>, <code>filter</code> and <code>reduce</code>.

<h3 id="map">Map</h3>
<p>By <code>a.map(f)</code> we return a copy of the list <code>a</code>
with <code>f</code> applied to every element.

<pre class="moss cmd-box">
&gt; list(1..4).map(|x| 2*x)
[2, 4, 6, 8]
</pre>

<p>The same function is provided by <code>Iterable</code>, with the
difference that it returns an iterator.

<pre class="moss cmd-box">
&gt; (1..).map(|x| 2*x).list(4)
[2, 4, 6, 8]

&gt; iter(list(1..4)).map(|x| 2*x).list()
[2, 4, 6, 8]
</pre>

<p>Instead of <code>A.map(f)</code> it is possible to write
<code>f[A]</code>. Here <code>A</code> is seen as a set, and
<code>f[A]</code> the image of the set <code>A</code> under
<code>f</code>. But it works not only on sets, but on any iterable
object. For example, to convert a string <code>s</code>
into the list of its character values, use <code>ord[s]</code>.

<pre class="moss cmd-box">
&gt; ord["abcd"]
[97, 98, 99, 100]
</pre>

<p>If <code>f</code> is a binary operator, <code>f[a,b]</code>
allows us to operate <code>a</code> and <code>b</code>
pointwise.

<pre class="moss cmd-box">
&gt; a = list(1..4)
&gt; add = |x,y| x+y
&gt; add[a,a]
[2, 6, 4, 8]

&gt; zip(a,a).map(|[x,y]| x+y).list()
[2, 6, 4, 8]
</pre>

<h3 id="filter">Filter</h3>
<p>By <code>a.filter(p)</code> we filter every element from
<code>a</code> that fulfills the predicate <code>p</code>.
For example, let us filter all divisors of <code>n</code>.

<pre class="moss cmd-box">
&gt; divisors = |n| list(1..n).filter(|k| n%k==0)
&gt; divisors(12)
[1, 2, 3, 4, 6, 12]
</pre>

<p>Let us find some Pythagorean triples.

<pre class="moss cmd-box">
&gt; (list(1..10)^3).filter(|[x,y,z]| x^2+y^2==z^2)
[[3, 4, 5], [4, 3, 5], [6, 8, 10], [8, 6, 10]]
</pre>

<p>Again, <code>Iterable</code> has a version that produces
an iterator.

<pre class="moss cmd-box">
&gt; list(1..).filter(|x| x%2==0).list(4)
[2, 4, 6, 8]
</pre>

<h3 id="reduce">Reduce</h3>

<p>By <code>a.reduce(f)</code> we insert <code>f</code> as a
binary operator between the elements of <code>a</code>.

<pre class="moss cmd-box">
&gt; 1+2+3+4+5+6+7+8+9+10
55

&gt; list(1..10).reduce(|x,y| x+y)
55
</pre>

<p>Note that <code>reduce</code> works not just on lists,
but on any iterable:

<pre class="moss cmd-box">
&gt; (1..10).reduce(|x,y| x+y)
55
</pre>

<p>A start element may be specified.
<pre class="moss cmd-box">
&gt; 1000+1+2+3+4
1010

&gt; (1..4).reduce(1000,|x,y| x+y)
1010
</pre>



<h3 id="count">Count</h3>

<p>By <code>a.count(p)</code> we count how often the predicate
<code>p</code> is fulfilled. Let us count all divisors of a number
<code>n</code>.

<pre class="moss cmd-box">
&gt; d = |n| (1..n).count(|k| n%k==0)
</pre>

<p>A number is prime if it has two divisors.

<pre class="moss cmd-box">
&gt; isprime = |n| d(n)==2
&gt; (1..).filter(isprime).list(10)
[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]
</pre>



<h2 id="transformations">Transformations</h2>
<h3 id="zip">Zip</h3>

<p>The operation <code>zip(a,b)</code> allows us to join
<code>a</code> and <code>b</code> elementwise.
<pre class="moss cmd-box">
&gt; zip([1,2,3,4],["a","b","c","d"]).list()
[[1, "a"], [2, "b"], [3, "c"], [4, "d"]]
</pre>

<p>For convenience:
<pre class="moss cmd-box">
&gt; zip(1..,"abcd").list()
[[1, "a"], [2, "b"], [3, "c"], [4, "d"]]

&gt; "abcd".enum(1).list()
[[1, "a"], [2, "b"], [3, "c"], [4, "d"]]
</pre>

<h2 id="comprehensions">Comprehensions</h2>

<h3 id="preliminary-remark">Preliminary remark</h3>
<p>In Moss, if we want to list the square numbers <var>x</var><sup>2</sup>
for <var>x</var> from 1 to 10, we have the following choices:
<pre class="moss indent">
a = list(1..10).map(|x| x^2)

a = list(x^2 for x in 1..10)

a = (|x| x^2)[1..10]

a = (1..).map(|x| x^2).list(10)

a = (x^2 for x in 1..).list(10)

a = list((1..10).map(|x| x^2))
</pre>

<p>You might ask why there are so many ways to achieve this.
Let me explain how the following three forms have a slightly different
purpose.

<table class="bt">
<tr>
<td><pre class="moss">a.map(f)</pre>
<td>Maps a function <code>f</code> to each element of <code>a</code>.
This is abstract and will work even for matrix data types.

<tr>
<td><pre class="moss">f(x) for x in a</pre>
<td>Creates an iterator that can be turned into a list, set or map.
This allows multiple for- and if-clauses. Thus it can be used for
constructions involving subsets of cartesian products.

<tr>
<td><pre class="moss">f[a,b,c,...]</pre>
<td>Performs an implicit zip-operation. Reflects the notation
<code>f[X]</code> for the image of the set <code>X</code>
under <code>f</code>.
</table>

<p>For example, a cartesian product is created this way:
<pre class="moss indent">
prod = |a,b| list([x,y] for x in a for y in b)

prod = |a,b| a.map(|x| b.map(|y| [x,y])).chain()

prod = |a,b| (|x| (|y| [x,y])[a])[b].chain()

prod = |a,b| a*b
</pre>

<p>The addition of two lists as if they would be
vectors is achieved this way:
<pre class="moss indent">
add = |v,w| list(zip(v,w).map(|[x,y]| x+y))

add = |v,w| list(x+y for x,y in zip(v,w))

add = |v,w| (|x,y| x+y)[v,w]
</pre>

<br>
<h3 id="list-comprehensions">List comprehensions</h3>

<p>A list comprehension is basically <code>filter</code>,
<code>map</code> or chaining both:
<pre class="moss indent">
a = list(1..10).filter(|x| x%2==0).map(|x| x^2)

a = list(x^2 for x in 1..10 if x%2==0)
</pre>

<p>Abstractly, we have:
<pre class="moss indent">
a = list(r).filter(p).map(f)

a = list(f(x) for x in r if p(x))
</pre>
<p>In these expressions, <code>r</code> is some range or iterable,
<code>p</code> is a predicate and <code>f</code> is a function/mapping.
A predicate is a function that returns values of type <code>Bool</code>.

<p>The predicate may be omitted:
<pre class="moss indent">
a = list(r).map(f)

a = list(f(x) for x in r)
</pre>

<p>The mapping may be omitted:
<pre class="moss indent">
a = list(r).filter(p)

a = list(x for x in r if p(x))
</pre>

<br>
<h3 id="set-comprehensions">Set comprehensions</h3>

<p>In mathematics sets are stated by set-builder notation:
<p class="indent">{<var>f</var>(<var>x</var>) |
<var>x</var> &in; <var>A</var> &and; <var>p</var>(<var>x</var>)}

<p>For finite sets this can be stated in Moss:
<pre class="moss indent">
set(f(x) for x in A if p(x))
</pre>

<p>For infinite sets you might at least want a function that depends on
a number <code>n</code>, examining finite subsets:
<pre class="moss indent">
B = |n| set((f(x) for x in A() if p(x)).take(n))
</pre>

<br>
<h3 id="map-comprehensions">Map comprehensions</h3>

<p>A map comprehension allows us to inverse a map:
<pre class="moss indent">
inv = |m| map([value,key] for key,value in m.items())
</pre>

<p>An imperative formulation of <code>inv</code> is slightly longer:
<pre class="moss indent">
function inv(m)
  m2 = {}
  for key in m
    m2[m[key]] = key
  end
  return m2
end
</pre>

<p>Another example. The numbers from 0 to 25 are shuffled and
a random permutation map of the latin alphabet is obtained
from that:

<pre class="moss indent">
m = map([chr(x+ord('a')),chr(y+ord('a'))]
  for x,y in zip(0..25,list(0..25).shuffle()))
</pre>

<p>For convenience:
<pre class="moss indent">
m = map(zip("a".."z",list("a".."z").shuffle()))
</pre>

<br>
<h3 id="generator-comprehensions">Generator comprehensions</h3>

<p>We want to find solutions
of the Diophantine equation
<p class="indent"><var>x</var><sup>3</sup>
+ <var>y</var><sup>3</sup> + <var>z</var><sup>3</sup>
= <var>w</var><sup>3</sup>.

<p>A generator comprehension prevents the program from memory
  exhaustion and allows us to print found solutions instantly.  

<pre class="moss indent">
g = |n| ([x,y,z,w]
  for x in 1..n for y in 1..n
  for z in 1..n for w in 1..n
  if x^3+y^3+z^3 == w^3)

g(200).each(print)
</pre>



</body>
</html>

