<!DOCTYPE html>
<html>
<head>
  <meta charset="UTF-8">
  <title>Object system</title>
  <link rel="stylesheet" href="../css/main.css">
  <script src = "../js/moss-syntax.js">
  </script>
</head>
<body>

<table class="navigation">
<tr><td><b>&uarr;</b> <a href="toc.htm">Up</a>
</table>
<h1>Object system</h1>

<div class="toc">
<h2 id="toc">Table of contents</h2>
<ol>
<li><a href="#a-simple-class">A simple class</a>
<li><a href="#constructors">Constructors</a>
<li><a href="#destructors">Destructors</a>
<li><a href="#type-checks">Runtime type checks</a>
<li><a href="#inheritance">Inheritance</a>
<li><a href="#multiple-inheritance">Multiple inheritance</a>
<li><a href="#prototypes">Prototype based inheritance</a>
<li><a href="#composition">Composition over inheritance</a>
<li><a href="#reflection">Reflection</a>
<li><a href="#aop">Aspect-oriented programming</a>
<li><a href="#overloading">Operator overloading</a>
<li><a href="#read-only">Read-only properties</a>
<li><a href="#private">Private properties</a>
<li><a href="#monkey">Monkey patching</a>
<li><a href="#custom">Custom class constructors</a>
</ol>
</div>

<h2 id="a-simple-class">A simple class</h2>

<p>As a first example, a class with a method <code>quack</code>
is stated.

<pre class="moss indent">
class Duck = {
   function quack()
      print(self.name, " quacks.")
   end
}

d = table Duck{name = "Dagobert"}
d.quack()
</pre>

<p>Object properties shadow class properties. For example,
the method <code>quack</code> may be shadowed by a
special method:

<pre class="moss indent">
d.quack = fn||
   print(self.name, " quacks loudly.")
end

d.quack()
</pre>

<h2 id="constructors">Constructors</h2>

<p>Objects are constructed by ordinary functions.
For example, a function <code>duck</code> may create
an object of class <code>Duck</code>.

<pre class="moss indent">
function duck(name)
   return table Duck{name = name}
end

d = duck("Dagobert")
d.quack()
</pre>

<p>It can be moved into the class, that is only a matter of style:
<pre class="moss indent">
class Duck = {
   function quack()
      print(self.name, " quacks.")
   end,
   function new(name)
      return table Duck{name = name}
   end
}

d = Duck.new("Dagobert")
d.quack()
</pre>


<h2 id="destructors">Destructors</h2>

<p>When an object is not needed anymore, a destructor method
<code>drop</code> may be called automatically. It is a special method
that can only be stated at class construction and cannot
be shadowed by local properties.

<pre class="moss indent">
class Duck = {
   function quack()
      print(self.name, " quacks.")
   end,
   function drop()
      print(self.name, " flies away.")
   end
}
</pre>

<h2 id="type-checks">Runtime type checks</h2>

<p>Type checks are performed in two ways.

<pre class="moss cmd-box">
&gt; type(d) is Duck
true

&gt; d: Duck
true
</pre>

<p>The former is only true if the types match exactly.
The latter is also true if <code>d</code> is an descendant.
For example, <code>d: Bird</code> would also be true,
in case <code>Duck</code> inherits from <code>Bird</code>.

<p>Of course, type checks are also provided for the basic data types
<p class="indent">
<code>Bool, Int, Long, Float, Complex,
Range, List, Map, String, Function.</code>

<p>The types <code>Range</code>, <code>List</code>, <code>Map</code>,
<code>String</code>, <code>Function</code> inherit
from <code>Iterable</code>.

<p>Runtime type checks return a boolean value. Assert statements
stay quiet for true and turn false into an exception.
Any expression with boolean value is possible:

<pre class="moss indent">
assert d: Duck

assert x: Int and x&gt;=0
</pre>

<h2 id="inheritance">Inheritance</h2>

<p>A class may inherit properties from a parent class.

<pre class="moss indent">
class Bird = {
   function fly()
      print(self.name, " flies.")
   end
}

class Duck: Bird = {
   function quack()
      print(self.name, " quacks.")
   end
}

d = table Duck{name = "Dagobert"}
d.fly()
d.quack()
</pre>

<p>As Duck just points to Bird, changing Bird afterwards will be
reflected in Duck. This may be prevented by swallowing the
properties of Bird instead. Replace

<pre class="moss indent">
class Duck: Bird = {...}
</pre>

<p>by shallow copy:

<pre class="moss indent">
class Duck = record(Bird)|{...}
</pre>

<p>or by deep copy:

<pre class="moss indent">
class Duck = deep_copy(record(Bird))|{...}
</pre>

<p>The function <code>deep_copy</code> is not part of the
core language. You will find it in the standard library.

<h2 id="multiple-inheritance">Multiple inheritance</h2>

<p>A class may inherit from more than one parent.

<pre class="moss indent">
class Diver = {
   function dive()
      print(self.name, " dives.")
   end
}

class Bird = {
   function fly()
      print(self.name, " flies.")
   end
}

class Duck: [Bird, Diver] = {
   function quack()
      print(self.name, " quacks.")
   end
}

d = table Duck{name = "Dagobert"}
d.fly()
d.dive()
d.quack()
</pre>

<p>A property is first searched in Duck, then in Bird
and then in Diver.

<p>Instead of pointing to Bird and Diver, we can
alternatively create a shallow copy:

<pre class="moss indent">
function extends(*a)
   buffer = {}
   for m in a
      buffer.extend(record(m))
   end
   return fn|m|
      buffer.update(m)
      return buffer
   end
end

class Diver = {
   function dive()
      print(self.name, " dives.")
   end
}

class Bird = {
   function fly()
      print(self.name, " flies.")
   end
}

class Duck = extends(Bird,Diver){
   function quack()
      print(self.name, " quacks.")
   end
}

d = table Duck{name = "Dagobert"}
d.fly()
d.dive()
d.quack()
</pre>

<h2 id="prototypes">Prototype based inheritance</h2>

<p>An instance object may inherit from another instance object,
its prototype. For example, a duck object may be regarded as
an descendant of a bird object.

<pre class="moss indent">
bird = table{
   function fly()
      print(self.name, " flies.")
   end,
   name = "Unnamed bird"
}

d = table bird{name = "Dagobert"}

bird.fly()
d.fly()
</pre>

<p>The prototype system also allows multiple inheritance:

<pre class="moss indent">
diver = table{
   function dive()
      print(self.name, " dives.")
   end,
   name = "Unnamed diver"
}

d = table[bird, diver]{name = "Dagobert"}
d.fly()
d.dive()
</pre>

<p>Usage of the class system and the prototype system may be mixed:

<pre class="moss indent">
class Bird = {
   function fly()
      print(self.name, " flies.")
   end
}

bird = table Bird{name = "Unnamed bird"}
d = table bird{name = "Dagobert"}

bird.fly()
d.fly()
assert d: Bird
assert d: bird
assert type(d) is bird
</pre>

<p>It should be noted that <code>type</code> only returns the flat
type. To obtain the deeper underlying class, the more advanced behavior
shown in <code>deep_type</code> is necessary.

<pre class="moss indent">
function deep_type(t)
   T = type(t)
   return T if type(T) is Type else deep_type(T)
end
</pre>

<h2 id="composition">Composition over inheritance</h2>

<p>Inheritance has the disadvantage that it might lead to
name clashes. In case both ancestors have a method with the
same name, which one should be used? This problem is solved
by replacing inheritance with composition.

<p>The following approach enables automatic composition
by prefixing class properties.

<pre class="moss indent">
function compose(tab)
   buffer = {}
   for prefix, type in tab.items()
      for key, value in record(type).items()
         buffer[prefix+"_"+key] = value
      end
   end
   return fn|m|
      buffer.update(m)
      return buffer
   end
end

class Diver = {
   function dive()
      print(self.name, " dives.")
   end
}

class Bird = {
   function fly()
      print(self.name, " flies.")
   end
}

class Duck = compose{"bird": Bird, "diver": Diver}{
   function quack()
      print(self.name, " quacks.")
   end
}

d = table Duck{name = "Dagobert"}
d.bird_fly()
d.diver_dive()
d.quack()
</pre>

<p>It might be that not only class properties clash, but also
object properties. To solve this problem, we need more fine-grained
control.

<pre class="moss indent">
class Diver = {
   function dive()
      print(self.name, " dives ", self.quickness, ".")
   end
}

class Bird = {
   function fly()
      print(self.name, " flies ", self.quickness, ".")
   end
}

class Duck = {
   function quack()
      print(self.name, " quacks.")
   end
}

function duck(argm)
   name = argm["name"]
   bq = argm["bird_quickness"]
   dq = argm["diver_quickness"]
   return table Duck{
      name = name,
      bird = table Bird{name = name, quickness = bq},
      diver = table Diver{name = name, quickness = dq}
   }
end

d = duck{
   name = "Dagobert",
   bird_quickness = "fast",
   diver_quickness = "very fast"
}
d.bird.fly()
d.diver.dive()
d.quack()
</pre>

<h2 id="reflection">Reflection</h2>

<p>Reflection is the possibility to construct, obtain and modify the
structure of a type at runtime. To achieve this, classes and objects
may constructed dynamically from data.

<pre class="moss indent">
Duck = class "Duck" {
   "quack": fn||
      print(self.("name"), " quacks.")
   end
}

d = table Duck{"name": "Dagobert"}
d.("quack")()
</pre>

<p>The properties are ordinary key-value maps:

<pre class="moss indent">
class_data = {
   "quack": fn||
      print(self.("name"), " quacks.")
   end
}
Duck = class "Duck" (class_data)

table_data = {"name": "Dagobert"}
d = table Duck(table_data)
d.("quack")()
</pre>

<p>The map may be accessed with <code>record</code>:

<pre class="moss indent">
m = record(Duck)
m["quack"](d;)
</pre>

<p>We have:
<pre class="moss indent">
d.name == d.("name") == record(d)["name"]
</pre>

<p>But note that the dot operation also searches in
the class and its ancestors, whereas the record lookup
does not.


<h2 id="aop">Aspect-oriented programming</h2>

<p>A class may be modified automatically in such a way, that
a special function called an <i>advice</i> enables us to do operations
before and after each method call. We will call this <i>wrapping</i>.
For example, a function <code>log</code> should print to the
command-line when a method starts and ends.

<pre class="moss indent">
function wrap(Class,advice)
   m = record(Class)
   for key, value in m.items()
      if type(value) is Function
         m[key] = |*argv| advice(key,value,self,argv)
      end
   end
end

function log(name,method,pself,argv)
   print("[Start of method {}]"%[name])
   rv = method(pself;*argv)
   print("[End of method {}]"%[name])
   return rv
end

class Duck = {
   function quack()
      print(self.name, " quacks.")
   end
}

wrap(Duck,log)

d = table Duck{name = "Dagobert"}
d.quack()
</pre>


<h2 id="overloading">Operator overloading</h2>

<p>Table of binary overloadable operators:

<table class="bt indent">
<tr>
  <th>Op.
  <th>left
  <th>right
<tr>
  <td class="r"><code>a+b</code>
  <td><code>add</code>
  <td><code>radd</code>
<tr>
  <td class="r"><code>a-b</code>
  <td><code>sub</code>
  <td><code>rsub</code>
<tr>
  <td class="r"><code>a*b</code>
  <td><code>mul</code>
  <td><code>rmul</code>
<tr>
  <td class="r"><code>a/b</code>
  <td><code>div</code>
  <td><code>rdiv</code>
<tr>
  <td class="r"><code>a//b</code>
  <td><code>idiv</code>
  <td><code>ridiv</code>
<tr>
  <td class="r"><code>a^b</code>
  <td><code>pow</code>
  <td><code>rpow</code>
<tr>
  <td class="r"><code>a&amp;b</code>
  <td><code>band</code>
  <td><code>rband</code>
<tr>
  <td class="r"><code>a|b</code>
  <td><code>bor</code>
  <td><code>rbor</code>
<tr>
  <td class="r"><code>a==b</code>
  <td><code>eq</code>
  <td><code>req</code>
<tr>
  <td class="r"><code>a&lt;b</code>
  <td><code>lt</code>
  <td><code>rlt</code>
<tr>
  <td class="r"><code>a&lt;=b</code>
  <td><code>le</code>
  <td><code>rle</code>
</table>

<p>Table of unary overloadable operators:
<table class="bt indent">
<tr>
  <th>Op.
  <th>Method
<tr>
  <td class="r"><code>-a</code>
  <td><code>neg</code>
<tr>
  <td class="r"><code>~a</code>
  <td><code>comp</code>
</table>

<p>Here is an implementation of complex number arithmetic.
Complex numbers are covered already by the Moss language,
but this implementation allows also for arithmetic of
complex integers.

<pre class="moss indent">
function complex(x,y)
   return table Complex{re=x, im=y}
end

class Complex = {
   function string()
      return "({}, {})" % [self.re, self.im]
   end,

   function neg()
      return table Complex{re = -self.re, im = -self.im}
   end,

   function add(a;b)
      if b: Complex
         return table Complex{re = a.re+b.re, im = a.im+b.im}
      else
         return table Complex{re = a.re+b, im = a.im}
      end
   end,

   function radd(a;b)
      return table Complex{re = a+b.re, im = b.im}
   end,

   function sub(a;b)
      if b: Complex
         return table Complex{re = a.re-b.re, im = a.im-b.im}
      else
         return table Complex{re = a.re-b, im = a.im}
      end
   end,

   function rsub(a;b)
      return table Complex{re = a-b.re, im = -b.im}
   end,

   function mul(a;b)
      if b: Complex
         return table Complex{
            re = a.re*b.re-a.im*b.im,
            im = a.re*b.im+a.im*b.re
         }
      else
         return table Complex{re = a.re*b, im = a.im*b}
      end
   end,

   function rmul(a;b)
      return table Complex{re = a*b.re, im = a*b.im}
   end,

   function div(a;b)
      if b: Complex
         r2 = b.re*b.re+b.im*b.im
         return table Complex{
            re = (a.re*b.re+a.im*b.im)/r2,
            im = (a.im*b.re-a.re*b.im)/r2
         }
      else
         return table Complex{re = a.re/b, im = a.im/b}
      end
   end,

   function rdiv(a;b)
      r2 = b.re*b.re+b.im*b.im
      return table Complex{
         re = a*b.re/r2,
         im = -a*b.im/r2
      }
   end,

   function pow(a;n)
      return (1..n).prod(|k| a)
   end
}
</pre>

<p>Example of use:
<pre class="moss cmd-box">
&gt; i = complex(0,1)
&gt; 4+2*i
(4, 2)

&gt; (4+2*i)*(5+3*i)
(14, 22)

&gt; (4+2*i)^60
(-964275081903216557328422924784146317312,
  472329409445772258729579365571477110784)

&gt; (4+2i)^60
-9.64275e+38+4.72329e+38i
</pre>

<h2 id="read-only">Read-only properties</h2>

<p>Sometimes only methods that belong to the object should have write
access to a property. Such a close relationship of the object
to its methods can be achieved by a closure-binding of an interal
private property table.

<pre class="moss indent">
class Duck = {}

function duck()
   private_tab = {beak_color = "yellow"}
   return table Duck{
      function get(property)
         return private_tab[property]
      end,
      function orange_beak()
         private_tab["beak_color"] = "orange"
      end
   }
end

d = duck()
print(d.get("beak_color"))
d.orange_beak()
print(d.get("beak_color"))
</pre>
<p>Every method that has direct access to <code>private_tab</code>
must belong to <code>d</code> and not to its
type <code>Duck</code>.

<h2 id="private">Private properties</h2>

<p>Private properties are constructed the same way as read-only
properties. Only methods that belong to the object should be able
to see the properties.

<pre class="moss indent">
class Duck = {}

function duck()
   private_tab = {beak_color = "yellow"}
   return table Duck{
      function quack()
         color = private_tab["beak_color"]
         print("The duck quacks out of his {} beak."%[color])
      end,
      function orange_beak()
         private_tab["beak_color"] = "orange"
      end
   }
end

d = duck()
d.quack()
d.orange_beak()
d.quack()
</pre>

<h2 id="monkey">Monkey patching</h2>

<p>We are able to add methods to already existent types. This
technique is called <i>monkey patching</i> and considered a bad
practice, because it can result in name conflicts.

<p>As an example, we will add a method to the list type that
splits the list into pairs.

<pre class="moss cmd-box">
&gt; List.pairs = || list(self.chunks(2))
&gt; list(1..4).pairs()
[[1,2], [3,4]]
</pre>

<p>A more interesting example of a convenience extension:
<pre class="moss indent">
String.split = fn|sep|
   a = []; w = []
   for c in self
      if c in sep
         if len(w)!=0 then a.push(w.join()) end
         w = []
      else
         w.push(c)
      end
   end
   if len(w)!=0 then a.push(w.join()) end
   return a
end
</pre>

<pre class="moss cmd-box">
&gt; "1, 12, 3.5, 9".split(",\s")
["1", "12", "3.5", "9"]
</pre>


<h2 id="custom">Custom class constructors</h2>

<p>Custom class constructors allow us to state object systems with
different behavior.

<pre class="moss">
# An implementation of prototyping inheritance.
function get(key)
   data = record(self)
   while true
      if key in data
         return data[key]
      elif "prototype" in data
         data = record(data["prototype"])
      else
         raise "key '{}' not found" % [key]
      end
   end
end

function set(key,value)
   record(self)[key] = value
end

# A custom class constructor.
function pclass(name,m)
   m["get"] = get
   m["set"] = set
   return class(name)(m)
end

Object = pclass("Object",{})

bird = table Object{
   function fly()
      print(self.name, " flies.")
   end,
   name = "Unnamed bird"
}

d = table Object{prototype = bird, name = "Dagobert"}

bird.fly()
d.fly()
</pre>


</body>
</html>
