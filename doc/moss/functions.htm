<!DOCTYPE html>
<html>
<head>
  <meta charset="UTF-8">
  <title>Functions</title>
  <link rel="stylesheet" href="../css/main.css">
  <script src = "../js/moss-syntax.js">
  </script>
</head>
<body>

<table class="navigation">
<tr><td><b>&uarr;</b> <a href="toc.htm">Up</a>
</table>
<h1>Functions</h1>

<div class="toc">
<h2 id="toc">Table of contents</h2>
<ol>
<li><a href="#rec">Recursion</a>
<li><a href="#pf">Passing functions</a>
<li><a href="#currying">Currying</a>
<li><a href="#closures">Closures</a>
<li><a href="#rp">Reference parameters</a>
<li><a href="#var">Variadic functions</a>
<li><a href="#opt">Optional arguments</a>
<li><a href="#named">Named arguments</a>
<li><a href="#unpacking">Argument list unpacking</a>
<li><a href="#argc">Argument count</a>
<li><a href="#methods">Methods</a>
<li><a href="#app">Function application</a>
<li><a href="#return">Multiple return values</a>
<li><a href="#static">Static variables</a>
<li><a href="#lazy">Lazy evaluation</a>
</ol>
</div>


<h2 id="rec">Recursion</h2>

<p>Let <code>sum</code> be a function that takes two arguments
<code>a,b</code> and returns their sum <code>a+b</code>. There is a
recursive algorithm which only needs the functions successor and
predecessor to perform the computation.

<pre class="moss indent">
succ = |x| x+1
pred = |x| x-1

sum = |a,b| a if b==0 else sum(succ(a),pred(b))
</pre>

<p>Inside of the last function there is a call to the global variable
<code>sum</code> which points to the function itself. Note that
because of this we are not allowed to change the name of the function
and overwrite its old name. Instead of using a global variable we
can use a private variable which will point to the function itself more
directly. Then overwriting the old name becomes possible.
<pre class="moss indent">
sum = fn f|a,b| a if b==0 else f(succ(a),pred(b)) end

# Now valid
old_sum = sum
sum = some_other_function
</pre>


<h2 id="pf">Passing functions</h2>

<p>Normal control flow has a specific restriction which is dissolved
if we regard functions as objects that can be stored in variables
and passed to other functions.

<p>In normal control flow a program can call a subprogram which
can call another subprogram which can call another subprogram
and so on. The program can choose which subprogram is called
by using if-statements, but <i>knows</i> already what subprograms
are avaiable. What if the program <i>does not</i> know about
the subprograms it can call? Not that the number of possible
subprograms is too large, but that the
program really does not know the subprogram in before.

<p>If the subprogram to call is stored in a global variable,
a compound object or passed as an argument, the program only needs
to know the subprogram just before the call.

<p>One of the easiest examples is the function <code>map</code>
which applies a given function to each element of a list.
<pre class="moss indent">
function map(a,f)
   b = []
   for x in a
      b.push(f(x))
   end
   return b
end

print(map([1,2,3,4],|x| 2*x))
# Output:
# [2, 4, 6, 8]
</pre>

<p>Interestingly, passing functions allows the construction of custom
control structures. A basic for loop is written without much effort.
<pre class="moss indent">
function For(a,b,f)
   i=a
   while i&lt;=b
      f(i)
      i+=1
   end
end

For(1,4,fn|i|
   print(i, "^ = ", str(2^i).rjust(2,"0"))
end)
# 2^1 = 02
# 2^2 = 04
# 2^3 = 08
# 2^4 = 16
</pre>


<h2 id="currying">Currying</h2>

<p>Let us implement numerical differentiation.
The first way one can think to do this, is to use the
definition of the derivative directly.
<pre class="moss indent">
function diff(f,x)
   h = 0.001
   return (f(x+h)-f(x))/h
end
</pre>

<p>This is a little bit naive. The following algorithm does it
better, because it cancels out errors.
<pre class="moss indent">
function diff(f,x)
   h = 0.001
   return (f(x+h)-f(x-h)/(2*h)
end
</pre>

<p>The differential operator may also be seen as an operator that
takes a function and returns a function (the derivative). If we
use currying, we can use both views directly.
<pre class="moss indent">
D = |f| |x| diff(f,x)
</pre>

<p>Now <code>D</code> is the differential operator, <code>D(f)</code>
is the first derivative and <code>D(f)(x)</code> is the same
as <code>diff(f,x)</code>. And that simply is currying. The
operator&nbsp;<code>D</code> is the curried form of <code>diff</code>.


<h2 id="closures">Closures</h2>

<p>In Moss we are able to generate functions from data at runtime.
To achieve this, it must be possible to bind some data to a
function dynamicly. Such a binding is called <em>closure</em>.

<p>A simple example is the conversion of a list <code>a</code>
into a function <code>f</code>, so
that <code>f(i)==a[i]</code> for all indices of <code>a</code>.

<pre class="moss cmd-box">
&gt; seq = |a| |i| a[i]
&gt; f = seq([4,2,3,1])
</pre>

<p>Furthermore, the bound data can itself be a function, because data,
that are all kinds of objects. A basic example is again the
differential operator.


<h2 id="rp">Reference parameters</h2>

<p>Moss has only (only has) "call by value". The following code does
not work, because <code>city</code> is called by value. We cannot
modify the variable <code>city</code> from inside of the function
<code>stars</code>.

<pre class="moss indent">
function stars(s)
   s = "*"+s+"*"
end

city = "London"
stars(city)
print(city)
# London
</pre>

<p>If we want reference parameters we have to use a reference
variable. Such a variable can be simulated as a list with only
one element.

<pre class="moss indent">
function stars(a)
   a[0] = "*"+a[0]+"*"
end

city = ["London"]
stars(city)
print(city[0])
# *London*
</pre>

<p>A table object can be used instead of a list.
If there are many arguments, this has better readability.

<pre class="moss indent">
function stars(s)
   s.value = "*"+s.value+"*"
end

city = table{value = "London"}
stars(city)
print(city.value)
# *London*
</pre>


<h2 id="var">Variadic functions</h2>

<p>If the formal argument of a function is prefixed by an asterisk,
the argument list might have any argument count and will be
automatically converted into a list.
<pre class="moss cmd-box">
&gt; p = |*a| a.join("|")
&gt; p(1,2,3,4)
"1|2|3|4"
</pre>

<p>There may be obligatory arguments.
<pre class="moss cmd-box">
&gt; p = |x,y,*a| a.join("|",x,y)
&gt; p("(",")",1,2,3,4)
"(1|2|3|4)"
</pre>

<p>In most situations it is preferable to use explicit lists
instead. That is, to simply remove the asterisks. Then the
function call is as follows.
<pre class="moss cmd-box">
&gt; p("(",")",[1,2,3,4])
"(1|2|3|4)"
</pre>


<h2 id="opt">Optional arguments</h2>

<p>For the last formal argument(s), a default value may be specified.
If the actual argument is omitted, this default value is taken.

<pre class="moss cmd-box">
&gt; p = |x,y,sep=", "| "({}{}{})" % [x,sep,y]
&gt; p(1,2)
"(1, 2)"

&gt; p(1,2,"|")
"(1|2)"
</pre>

<p>You may even branch to different behavior.

<pre class="moss cmd-box">
&gt; p = |x,y=null| p1(x) if y is null else p2(x,y)
</pre>


<h2 id="named">Named arguments</h2>

<p>Named arguments can be simulated by maps.

<pre class="moss cmd-box">
&gt; p = |m| "({}{}{})" % [m["x"],m["sep"],m["y"]]
&gt; p({x=1,y=2,sep="|"})
"(1|2)"

&gt; p = |m| "({x}{sep}{y})" % m
&gt; p({x=1,y=2,sep="|"})
"(1|2)"
</pre>

<p>For convenience, such a map can be unpacked, allowing
named default arguments:
<pre class="moss indent">
function p(m)
   {x,y,sep=", "} = m
   return "({}{}{})" % [x,sep,y]
end

function p({x,y,sep=", "})
   return "({}{}{})" % [x,sep,y]
end
</pre>

<p>A default configuration may be given for everything:
<pre class="moss indent">
function p(m={})
   {x="x", y="y", sep=", "} = m
   return "({}{}{})" % [x,sep,y]
end
</pre>

<p>Curly brackets around actual arguments may be omitted:
<pre class="moss cmd-box">
&gt; p({x=1, y=2, sep="|"})
"(1|2)"

&gt; p(x=1, y=2, sep="|")
"(1|2)"
</pre>

<p>Positional and named arguments may be mixed:
<pre class="moss indent">
function p(x,y,m={})
   {sep=", "} = m
   return "({}{}{})" % [x,sep,y]
end
</pre>
<pre class="moss cmd-box">
&gt; p(1,2,sep="|")
"(1|2)"

&gt; p(sep="|",1,2)
"(1|2)"

&gt; p(1,2)
"(1, 2)"
</pre>
<p>In many situations it is desirable to check for invalid named
arguments, but this must be done explicitely. One does so by
depleting the argument map and checking whether some arguments are
leftover:

<pre class="moss indent">
use unpack: drain, assert_empty

function p(m)
   {x,y,sep} = drain(m)
   assert_empty(m)
   return "({}{}{})" % [x,sep,y]
end
</pre>

<pre class="cmd-box">
<span class="moss">&gt; p(x=1,y=2,sep="|",left="(",right=")")</span>
Traceback:
  in p
  in assert_empty
Value error: unexpected named arguments:
  {"left": "(", "right": ")"}.
</pre>

<p>Note that a function that takes named arguments needs to have
a fixed number of positional arguments. If the function shall
be variadic or take optional positional arguments, those arguments
must be put into a list:
<pre class="moss indent">
function p(a,m)
   {sep} = m
   return a.join(sep,"(",")")
end
</pre>
<pre class="moss cmd-box">
&gt; p([1,2,3,4],sep="|")
"(1|2|3|4)"
</pre>

<h2 id="unpacking">Argument list unpacking</h2>

<p>Sometimes we want a variadic function <code>f</code> to take the
elements of a list as its arguments. To make this task simple,
there is the generalized application operation <code>f(*a)</code>.
The prefix operator "<code>*</code>" is called
<i>list unpacking operator</i>, also known as <i>splat</i>.

<pre class="moss cmd-box">
# a variadic summation function
&gt; s = |*a| a.sum()

# a normal call
&gt; s(1,2,3,4)
10

# we want to do this
&gt; a = [1,2,3,4]
&gt; s(a[0],a[1],a[2],a[3])

# more pleasant, via unpacking
&gt; a = [1,2,3,4]
&gt; s(*a)
10
</pre>

<p>Now we can precisely state a feature of <code>print</code>.

<pre class="moss indent">
# One can transform
print("abcd") ≡≡ print("a","b","c","d")
≡≡ print(*["a","b","c","d"]) ≡≡ print(*list("abcd"))

# So, in general, if s is a string
print(s) ≡≡ print(*list(s))
</pre>

<p>Unpacking may be mixed with implicit and explicit self arguments.
So, if <code>x</code> is an object and <code>m</code> is a two
argument method of <code>x</code>, we have</code>

<pre class="moss indent">
x.m(a,b) ≡≡ x.m(*[a,b]) ≡≡ x.m(x;*[a,b]).
</pre>


<h2 id="argc">Argument count</h2>

<p>If a function <code>f</code> is not variadic, it has a fixed
number of arguments. This number is determined by
<code>f.argc()</code>.

<p>An application is a general truth table
printing program, that determines the table to print based on
the number of arguments of a given boolean function.

<pre class="moss indent">
function truth_table(f)
   a = [false,true]^f.argc()
   for x in a
      print((x+[f(*x)]).map(int))
   end
end
</pre>


<h2 id="methods">Methods</h2>

<p>In Moss, every function has a hidden argument, called
<code>self</code>. In a function call of the form
<code>x.m(a,b)</code>, the function <code>m</code> takes
<code>a,b</code> as normal arguments, and <code>x</code> as its
self argument. Viewed this way, <code>m</code> is called
<i>a method</i> of <code>x</code>.

<p>The self argument can be given explicitly:
<pre class="moss indent">
f(a,b) ≡≡ f(null; a,b),
x.m(a,b) ≡≡ x.m(x; a,b).
</pre>

<p>A simple example shows how self arguments work.
<pre class="moss cmd-box">
&gt; m = |a,b| [self,a,b]
&gt; m(1,2)
[null, 1, 2]

&gt; m("tea";1,2)
["tea", 1, 2]
</pre>

<p>If <code>m</code> is inserted in <code>String</code>,
all strings will have <code>m</code> as a method.
<pre class="moss cmd-box">
&gt; String.m = m
&gt; "tea".m(1,2)
["tea", 1, 2]
</pre>

<p>Conversely, we can extract some method of
<code>String</code>.
<pre class="moss cmd-box">
&gt; "tree".upper()
"TREE"

&gt; upper = String.upper
&gt; upper("tree";)
"TREE"
</pre>

<p>But in most cases this is not what we want.
If you want the method <code>upper</code> to be converted into a
function, simply create such a function.
<pre class="moss">
&gt; upper = |s| s.upper()
&gt; upper("tree")
"TREE"
</pre>

<p>There is still a little thing to be noted:
One can choose a unique name instead of "<code>self</code>".
Let us use "<code>x</code>" instead of "<code>self</code>".
Then the example from above reads:
<pre class="moss cmd-box">
&gt; m = |x;a,b| [x,a,b]
&gt; m("tea";1,2)
["tea", 1, 2]
</pre>

<p>This is needed in case an inner function literal shadows
an outer one. So, for example
<pre class="moss indent">
Function.plus = |g| |x| self(x)+g(x)
</pre>

<p>will no work as intended. Instead one has to state
this as
<pre class="moss indent">
Function.plus = |f;g| |x| f(x)+g(x)
</pre>

<p>wich, in this case, also looks clearly more likeable.
One could have written:
<pre class="moss indent">
Function.plus = fn|g|
   f = self
   return |x| f(x)+g(x)
end
</pre>
<p>But that is not for the sake of brevity.


<h2 id="app">Function application</h2>

<p>As just said, in Moss there is no invisible times. Instead
of <code>ab</code> or <code>a&nbsp;b</code> one has to write
<code>a*b</code>. But the function application operator is
invisible. The expression <code>f(x,y)</code> means
<pre class="indent">
f applied to (x,y).
</pre>

<p>The parenthesis pair on the right hand side is obligatory.
Now note that the left hand side of this operator may itself
be an expression. If <code>e</code> is some expression, then
<code>(e)(x,y)</code> means
<pre class="indent">
(e) applied to (x,y).
</pre>
<p>Here are some examples:
<pre class="indent">
f(x)(y) means (f applied to x) applied to y
a[k](x) means a[k] applied to x
</pre>

<p>Let us define addition of functions pointwise.
Look what that means.
<pre class="moss indent">
Function.plus = |f;g| |x| f(x)+g(x)
</pre>

<p>Now one can write <code>(f+g)(x)</code>
instead of <code>f(x)+g(x)</code>.

<p>If <code>t</code> is a pair, one may write
<code>f(*t)</code> instead of <code>f(t[0],t[1])</code>.
That is a more general way of function application,
because we can always write <code>f(*[t[0],t[1]])</code>.
In general we have
<pre class="moss indent">
  f(x,y) ≡≡ f(null;x,y) ≡≡   f(*[x,y]) ≡≡ f(null;*[x,y]),
a.m(x,y) ≡≡ a.m(a;x,y)  ≡≡ a.m(*[x,y]) ≡≡ a.m(a;*[x,y]).
</pre>


<h2 id="return">Multiple return values</h2>

<p>In Moss one can assign two values to two variables in one
statement:
<pre class="moss indent">
x,y = 360,240
</pre>

<p>This is the same as:
<pre class="moss indent">
x=360; y=240
</pre>

<p>But there is more going on here. Actually it is a shorthand.
Firstly the numbers on the right hand side are bundled, so that a
list is constructed. The square brackets are simply omitted.
Secondly the list is deconstructed on the left hand side.
The long, more powerful, form of this statement is as follows:
<pre class="moss indent">
[x,y] = [360,240]
</pre>

<p>We want <code>x,y</code> to be the coordinates of some
point of a circle line. This can be achieved by the following
function&nbsp;<code>f</code>.
<pre class="moss indent">
use math: pi, sin, cos

f = |t,r| [r*cos(2*pi*t), r*sin(2*pi*t)]

for i in 0..11
   x,y = f(i/12,1)
   print("x = {}; y = {}" % [x,y])
end
</pre>

<p>List unpacking (also known as destructuring) on the left hand side
is more general:
<pre class="moss indent">
t = [["x","y"],[1,2,3,4]]

[[x,y],[a,b,c,d]] = t
</pre>

<h2 id="static">Static variables</h2>

<p>Static variables are provided by using closures.
Let us take a simple counter as an example. It shall have
an internal static variable <code>k</code>, which holds
its state.

<pre class="moss indent">
function counter(k)
   return fn||
      k+=1
      return k-1
   end
end
</pre>

<pre class="moss cmd-box">
&gt; c = counter(0)
&gt; c(), c(), c(), c()
[0, 1, 2, 3]

&gt; c = counter(0)
&gt; c.list(4)
[0, 1, 2, 3]

&gt; c = counter(10)
&gt; c.list(4)
[10, 11, 12, 13]
</pre>


<h2 id="lazy">Lazy evaluation</h2>

<p>Lazy evaluation is not standard in Moss, but one can simulate
it like in Scheme.
<table class="bt">
<tr>
<th>Moss
<th>Scheme
<tr>
<td><code>t=|| expression
<td><code>(define t (delay expression))</code>
<tr>
<td><code>t()</code>
<td><code>(force t)</code>
</table>

<p>Now let us build such an infinite tree:
<pre class="indent">
                    0
                   / \
                  /   \
                 /     \
                /       \
               /         \
              /           \
             /             \
            /               \
           /                 \
          /                   \
         0                     1
        / \                   / \
       /   \                 /   \
      /     \               /     \
     /       \             /       \
    0         1           1         2
   / \       / \         / \       / \
  0   1     1   2       1   2     2   3
 / \ / \   / \ / \     / \ / \   / \ / \
.. ... .. .. ... ..   .. ... .. .. ... ..
</pre>

<p>This won't work:
<pre class="moss indent">
function tree(x)
   table{x=x, left=tree(x), right=tree(x+1)}
end
print(tree(0).right.right.right.x)
</pre>

<p>It produces infinite recursion.
We have to use explicit lazy evaluation:
<pre class="moss indent">
function tree(x)
   table{x=x, left=|| tree(x), right=|| tree(x+1)}
end
print(tree(0).right().right().right().x)
</pre>

<p>In some constructions, a value could either be a lazy expression
or a normal value.
In this case, lazy expressions should have their own data type.

<pre class="moss indent">
Lazy = table{
   string = || "lazy expression"
}

function delay(f)
   table Lazy{call=f}
end

function force(x)
   x.call() if x: Lazy else x
end

t = delay(|| 1+2)
print([force(2), force(t)])
</pre>

<p>But in most constructions, a value is never a function.
In such cases we can simply check for a function.
<pre class="moss indent">
function force(x)
   x() if x: Function else x
end

print([force(2), force(|| 1+2)])
</pre>


</body>
</html>

