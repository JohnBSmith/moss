<!DOCTYPE html>
<html>
<head>
  <meta charset="UTF-8">
  <title>Statistics</title>
  <link href="../css/main.css" rel="stylesheet">
  <script src = "../js/moss-syntax.js">
  </script>
</head>
<body>

<table class="navigation">
<tr><td><b>&uarr;</b> <a href="toc.htm">Up</a>
</table>
<h1>Statistics</h1>

<div class="toc">
<h2 id="toc">Table of contents</h2>
<ol>
<li><a href="#mean-sigma">Mean, standard deviation</a>
<li><a href="#simple-linear-regression">Simple linear regression</a>
<li><a href="#inverse-transform-sampling">Inverse transform sampling</a>
</ol>
</div>

<h2 id="mean-sigma">Mean, standard deviation</h2>

<pre class="moss">
# Throw a laplace dice 10000 times. Calculate mean
# and corrected standard deviation of this sample.

use math: sqrt

function mean(a)
  return a.sum()/size(a)
end

function sigma(a,m=null)
  if m is null
    m = mean(a)
  end
  return sqrt(a.sum(|x| (x-m)^2)/(size(a)-1))
end

Stat = table{
  function string
    return """\
      mean  = {:f4},\n\
      sigma = {:f4}\
    """ % [self.mean, self.sigma]
  end
}

function stat(a)
  m = mean(a)
  return table Stat{mean = m, sigma = sigma(a,m)}
end

s = stat(rand(1..6).list(10000))

print(s)
</pre>

<h2 id="simple-linear-regression">Simple linear regression</h2>

<pre class="moss">
LinearRegression = table{
  function string
    return """\
center = [mx,my]
mx = {mx:f4}
my = {my:f4}
rxy = {rxy:f4}

y(x) = ax*x+bx
ax = {ax:f4}
bx = {bx:f4}

x(y) = ay*y+by
ay = {ay:f4}
by = {by:f4}
""" % record(self)
  end
}

function linear_regression(a)
  vx,vy = list(zip(*a))

  mx = mean(vx)
  my = mean(vy)
  
  sx = vx.sum(|x| (x-mx)^2)
  sy = vy.sum(|y| (y-my)^2)
  sxy = a.sum(|[x,y]| (x-mx)*(y-my))

  ax = sxy/sx; bx = my-ax*mx
  ay = sxy/sy; by = mx-ay*my

  return table LinearRegression{
    rxy = sxy/sqrt(sx*sy),
    center = [mx,my],
    mx = mx, my = my,
    ax = ax, bx = bx,
    ay = ay, by = by,

    fx = |x| ax*x+bx,
    fy = |y| ay*y+by,
    gx = |y| (y-bx)/ax,
    gy = |x| (x-by)/ay
  }
end

rng = rand()
a = list(-2..2: 0.1).map(|x| [x,x+2*rng()])
r = linear_regression(a)

# print(r)

# Let us plot this sample
use svg.plotlib: system

s = system()
s.scatter(a)
s.plot([r.fx,r.gy])
s.scatter([r.center],color="800080")

print(s.flush())
# moss lr &gt; plot.svg
</pre>

<img src="../img/linear-regression.png">

<br><br><br>
<h2 id="inverse-transform-sampling">Inverse transform sampling</h2>

<pre class="moss">
use math: sqrt,erf
use svg.plotlib: system

# Numerical analysis:
# inversion by bisection method
use math.na: inv


# Inverse transform sampling
function rand_cdf(F)
  rng = rand()
  return || inv(F,rng(),-100,100)
end


# Take a list of random numbers and return the
# cumulative distribution function of this sample.
function cdf(a)
  return |x| a.count(|X| X&gt;=x)/size(a)
end


# CDF: normal distribution
function norm({mu,sigma})
  return |x| 0.5+0.5*erf((x-mu)/sqrt(2*sigma^2))
end


# CDF: standard normal distribution
Phi = norm(mu=0.0,sigma=1.0)


X = rand_cdf(Phi)
F1 = cdf(X.list(10))
F2 = cdf(X.list(100))

s = system(wy=1.25,n=100)
s.plot([Phi,F1,F2])
print(s.flush())
</pre>

<img src="../img/cdf-standard-normal-distribution.png">

</body>
</html>

