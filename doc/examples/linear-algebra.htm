<!DOCTYPE html>
<html>
<head>
  <meta charset="UTF-8">
  <title>Linear algebra</title>
  <link href="../css/main.css" rel="stylesheet">
  <script src = "../js/moss-syntax.js">
  </script>
</head>
<body>

<table class="navigation">
<tr><td><b>&uarr;</b> <a href="toc.htm">Up</a>
</table>
<h1>Linear algebra</h1>

<div class="toc">
<h2 id="toc">Table of contents</h2>
<ol>
<li><a href="#vector-algebra">Vector algebra</a>
<li><a href="#matrix-algebra">Matrix algebra</a>
<li><a href="#col-row">Column and row vectors</a>
<li><a href="#complex-numbers">Complex numbers</a>
<li><a href="#gauss-jordan">Gauss-Jordan elimination</a>
<li><a href="#det">Determinant of a matrix</a>
<li><a href="#rat">Rational numbers</a>
<li><a href="#rand">Random numbers</a>
</ol>
</div>


<h2 id="vector-algebra">Vector algebra</h2>
<pre class="moss">
use math.la: vector

a = vector(1,2)
b = vector(3,4)

# Linear combination
c = 2*a+4*b

# Scalar product
s = a*b
</pre>


<h2 id="matrix-algebra">Matrix algebra</h2>
<pre class="moss">
use math.la: vector, matrix
use math: pi, sin, cos

A = matrix([
  [1,2],
  [3,4]
])

rot = |phi| matrix([
  [cos(phi),-sin(phi)],
  [sin(phi),cos(phi)]
])

deg = pi/180
B = rot(90*deg)

# Multiplication matrix*vector
v = vector(1,2)
w = A*v

# Multiplication matrix*matrix
C = A*B

# Transposition
C = A.T
</pre>


<h2 id="col-row">Column and row vectors</h2> 
<pre class="moss">
use math.la: matrix

# A row vector
v = matrix([1,2])

# A col vector
w = matrix([3,4]).T

# Scalar product
s = v*w

# Outer product
M = w*v
</pre>

<h2 id="complex-numbers">Complex numbers</h2> 
<pre class="moss">
use math.la: vector, matrix

v = vector(1+2i,3+4i)
w = vector(5+6i,7+8i)

# Scalar product
s = v.conj*w

A = matrix([
  [1+2i, 3+4i]
  [5+6i, 7+8i]
])

# Conjugate matrix
B = A.conj

# Conjugate transpose
B = A.T.conj
B = A.H

# Bra-ket notation
ketv = matrix([1+2i,3+4i]).T
ketw = matrix([5+6i,7+8i]).T
brav = ketv.H
braw = ketw.H

# Scalar product
s = brav*ketw

# Absolute value
# (uses Frobenius norm for compability with vectors)
r = abs(ketv)
</pre>

<h2 id="gauss-jordan">Gauss-Jordan elimination</h2> 
<pre class="moss">
use math.la: id, scalar

function pivoting(A,B,n,j)
  m = abs(A[j,j])
  k = j
  for i in j+1..n-1
    if m&lt;abs(A[i,j])
      m = abs(A[i,j])
      k = i
    end
  end
  A[j],A[k] = A[k],id(A[j])
  B[j],B[k] = B[k],id(B[j])
end

function gauss_jordan(A,B,n)
  for j in 0..n-1
    pivoting(A,B,n,j)
    B[j] = B[j]/A[j,j]
    A[j] = A[j]/A[j,j]
    for i in j+1..n-1
      if A[i,j]!=0
        B[i] = B[i]/A[i,j]-B[j]
        A[i] = A[i]/A[i,j]-A[j]
      end
    end
  end

  for i in 0..n-2
    for j in i+1..n-1
      B[i] = B[i]-A[i,j]*B[j]
      A[i] = A[i]-A[i,j]*A[j]
    end
  end

  return B
end

# A: a square matrix
# B: a matrix or a vector
function solve(A,B)
  n = A.shape[0]
  A = A.copy
  B = B.copy
  return gauss_jordan(A,B,n)
end

function inv(A)
  n = A.shape[0]
  A = A.copy
  E = scalar(n,1,0)
  return gauss_jordan(A,E,n)
end
</pre>

<h2 id="det">Determinant of a matrix</h2> 
<pre class="moss">
use math.la: id

function pivoting_det(A,n,j)
  m = abs(A[j,j])
  k = j
  for i in j+1..n-1
    if m&lt;abs(A[i,j])
      m = abs(A[i,j])
      k = i
    end
  end
  if k==j
    return false
  else
    A[j],A[k] = A[k],id(A[j])
    return true
  end
end

function det(A)
  n = A.shape[0]
  A = A.copy
  y = 1
  for j in 0..n-1
    if pivoting_det(A,n,j)
      y = -y
    end
    for i in j+1..n-1
      if A[i,j]!=0
        y = y/A[j,j]
        A[i] = A[i]*A[j,j]-A[j]*A[i,j]
      end
    end
    y = y*A[j,j]
  end
  return y
end
</pre>


<h2 id="rat">Rational numbers</h2>
<pre class="moss">
use math.rational: rat
use math.la: matrix
use math.la.inversion: det, inv

A = matrix(
  [1,2,3],
  [4,5,6],
  [7,7,9]
).map(rat)

print(det(A))
# -6

print(inv(A))
# matrix(
#   [-1/2, -1/2, 1/2],
#   [-1, 2, -1],
#   [7/6, -7/6, 1/2]
# )

print(inv(A)*A)
# matrix(
#   [1, 0, 0],
#   [0, 1, 0],
#   [0, 0, 1]
# )
</pre>

<h2 id="rand">Random numbers</h2>
<pre class="moss">
function random_vector(n,rng)
  return vector(*rng.list(n))
end

function random_matrix(m,n,rng)
  return matrix(*rng.chunks(n).list(m))
end

v = random_vector(4,rand(1..6))
A = random_matrix(4,4,rand(1..6))
B = random_matrix(4,4,rand())
</pre>

</body>
</html>

