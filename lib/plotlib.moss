

begin
global system, system3d

use math: pi, hypot, tanh, atan2, sin, cos
use cmath: re, im, arg
use gx: sleep

tau = 2.0*pi

color_table = [
  [0,0,0.6],
  [0,0.4,0],
  [0.6,0,0.4]
]

color_table_dark = [
  [0.8,0.7,0],
  [0.8,0,0.8],
  [0,0.6,0.6]
]

color_table3d = [
  [0.2,0.4,0.6,0.4],
  [0.8,0.2,0.6,0.4],
  [0,0.4,0,0.4]
]

function next_color(s)
  index = s.color_index
  color = s.ctab[index]
  s.color_index = (index+1)%size(s.ctab)
  return color
end

function hline(canvas,w,y)
  canvas.fill(0,y,w,2)
end

function vline(canvas,h,x)
  canvas.fill(x,0,2,h)
end

function draw_line(canvas,x1,y1,x2,y2)
  dx = x2-x1
  dy = y2-y1
  d = hypot(dx,dy)
  step = 0.002/d
  for t in 0..1: step
    x = x1+dx*t
    y = y1+dy*t
    canvas.point(x,y)
  end
end

function draw_dotted_line(canvas,x1,y1,x2,y2)
  dx = x2-x1
  dy = y2-y1
  d = hypot(dx,dy)
  step = 0.01/d
  for t in 0..1: step
    x = x1+dx*t
    y = y1+dy*t
    canvas.point(x,y)
  end
end

function draw_vector(canvas,x1,y1,x2,y2)
  draw_line(canvas,x1,y1,x2,y2)
  dx = x2-x1; dy = y2-y1
  d = hypot(dx,dy)
  dx = dx/d; dy = dy/d
  phi = 0.4
  c = cos(phi); s = sin(phi)
  x = c*dx-s*dy; y = s*dx+c*dy
  draw_line(canvas,x2,y2,x2-0.02*x,y2-0.02*y)
  x = c*dx+s*dy; y = c*dy-s*dx
  draw_line(canvas,x2,y2,x2-0.02*x,y2-0.02*y)
end

function grid(canvas,w,h,csys,cgrid,scale=1)
  canvas.rgb(*cgrid)
  step = w/20*scale
  x = w//2
  y = h//2
  for k in -6..6
    hline(canvas,w,y+int(k*step))
  end
  for k in -9..9
    vline(canvas,h,x+int(k*step))
  end
  canvas.rgb(*csys)
  hline(canvas,w,y)
  vline(canvas,h,x)
end

w = rand()

System = table{
  function plot(f,argm={})
    canvas = self.c
    wx = self.wx; px = self.px
    wy = self.wy; py = self.py
    {n = self.n, point = canvas.point, color = null} = argm
    step = wx/n
    if color is null
      if not self.ani
        canvas.rgb(*next_color(self))
      end
    else
      canvas.rgb(*color)
    end
    for x in px-wx..px+wx: step
      y = f(x)
      if y: Complex
        point(canvas;(x-px)/wx,(re(y)-py)/wy)
        point(canvas;(x-px)/wx,(im(y)-py)/wy)
      else
        point(canvas;(x-px)/wx,(y-py)/wy)
      end
    end
  end,

  function vplot(f,argm={})
    canvas = self.c
    wx = self.wx; px = self.px
    wy = self.wy; py = self.py
    { n=self.n, t0=0, t1=2*pi,
      point = canvas.point, color = null
    } = argm
    step = 1/n
    if color is null
      if not self.ani
        canvas.rgb(*next_color(self))
      end
    else
      canvas.rgb(*color)
    end
    for t in t0..t1: step
      x,y = f(t)
      point(canvas;(x-px)/wx,(y-py)/wy)
    end
  end,

  function scatter(a,argm=null)
    canvas = self.c
    wx = self.wx; px = self.px
    wy = self.wy; py = self.py
    if argm is null
      mark = canvas.disc
      radius = 0.008
    else
      {type = "disc", radius = 0.008} = argm
      if type=="disc"
        mark = canvas.disc
      elif type=="circle"
        mark = canvas.circle
      elif type=="box"
        mark = canvas.box
      end
    end
    for x,y in a
      mark(canvas;(x-px)/wx,(y-py)/wy,radius)
    end
  end,

  function line([x1,y1],[x2,y2])
    wx = self.wx; px = self.px
    wy = self.wy; py = self.py
    draw_line(self.c,(x1-px)/wx,(y1-py)/wy,(x2-px)/wx,(y2-py)/wy)
  end,

  function dotted_line([x1,y1],[x2,y2])
    wx = self.wx; px = self.px
    wy = self.wy; py = self.py
    draw_dotted_line(self.c,(x1-px)/wx,(y1-py)/wy,(x2-px)/wx,(y2-py)/wy)
  end,

  function path(a,line=null)
    if line is null
      line = self.line
    end
    if size(a)!=0
      x1,y1 = a[0]
      for x,y in a[1..]
        line(self;x1,y1,x,y)
        x1,y1 = x,y
      end
    end
  end,

  function vector([x1,y1],[x2,y2])
    wx = self.wx; px = self.px
    wy = self.wy; py = self.py
    draw_vector(self.c,(x1-px)/wx,(y1-py)/wy,(x2-px)/wx,(y2-py)/wy)
  end,

  function idle
    canvas = self.c
    canvas.lflush()
    canvas.flush()
    while true
      key = canvas.key()
      if key=="q" then break end
      sleep(0.1)
    end
  end,

  function rgb(*a)
     self.c.rgb(*a)
  end,

  function animate(f,argm={})
    canvas = self.c
    ctab = self.ctab
    bg = self.bg
    csys = self.csys
    cgrid = self.cgrid
    fscale = self.fscale
    w = self.w
    h = self.h
    a = 0
    {clear = true} = argm
    self.ani = true
    while true
      if clear
        canvas.clear(*bg)
      end
      grid(canvas,w,h,csys,cgrid,fscale)
      canvas.rgb(*ctab[0])
      f(a)
      canvas.lflush()
      canvas.flush()
      a+=0.02
      key = canvas.key()
      if key=="q" then break end
      sleep(0.01)
    end
    self.ani = false
  end,

  function cplot(f,argm={})
    canvas = self.c
    {n=4} = argm
    W = self.w//n
    H = self.h//n
    ratio = H/W
    ai = 2/(W-1)
    aj = 2/(H-1)
    wx = self.wx; px = self.px
    wy = self.wy; py = self.py
    grid(canvas,self.w,self.h,[0,0,0],[0,0,0,0.4])
    for j in 0..H-1
      for i in 0..W-1
        x = px+(ai*i-1)*wx
        y = py-(aj*j-1)*ratio*wy
        w = f(x+y*1i)
        phi = arg(w)
        if phi<0 then phi=phi+tau end
        r = tanh(0.1*abs(w))
        canvas.hsl(phi,1,r,0.94)
        canvas.fill(i*n,j*n,n,n)
      end
    end
    # grid(canvas,self.w,self.h,[0.7,0.7,0.7,0.4],[0.9,0.9,0.9,0.2])
  end
}

function point3d(canvas,c,s,x,y,z)
  xt = c*x-s*y
  yt = s*x+c*y
  xp = yt-xt
  yp = z-0.5*xt-0.5*yt
  canvas.point(xp,yp)
end

function rotate(c,s,x,y)
  return c*x-s*y, s*x+c*y
end

function sys3d(canvas,c,s)
  x,y = rotate(c,s,0,0.5)
  draw_line(canvas,0,0,y-x,-0.5*x-0.5*y)

  x,y = rotate(c,s,0.5,0)
  draw_line(canvas,0,0,y-x,-0.5*x-0.5*y)

  draw_line(canvas,0,0,0,0.5)
end

System3d = table{
  idle = System.idle,
  rgb = System.rgb,
  function plot(f,argm={})
    {color = null} = argm
    canvas = self.c
    wx = self.wx; wy = self.wy; wz = self.wz
    px = self.px; py = self.py; pz = self.pz
    mx = self.mx; my = self.my
    nx = self.nx; ny = self.ny
    phi = self.phi
    m = 0.5
    c = cos(phi)
    s = sin(phi)

    if color is null
      canvas.rgb(*next_color(self))
    else
      canvas.rgb(*color)
    end

    for x in -wx..wx: wx/mx
      for y in -wy..wy: wy/ny
        z = f(x,y)
        point3d(canvas,c,s,m*x/wx,m*y/wy,m*z/wz)
      end
    end
    for y in -wy..wy: wy/my
      for x in -wx..wx: wx/nx
        z = f(x,y)
        point3d(canvas,c,s,m*x/wx,m*y/wy,m*z/wz)
      end
    end
    canvas.rgb(0,0,0,0.8)
    sys3d(canvas,c,s)
  end,

  function splot(f,argm={})
    {color = null,
     u0=0, u1=1, v0=0, v1=1,
     mu=5, mv=5, nu=200, nv=200
    } = argm
    canvas = self.c
    wx = self.wx; wy = self.wy; wz = self.wz
    px = self.px; py = self.py; pz = self.pz
    mx = self.mx; my = self.my
    nx = self.nx; ny = self.ny
    phi = self.phi
    m = 0.5
    c = cos(phi)
    s = sin(phi)

    if color is null
      canvas.rgb(*next_color(self))
    else
      canvas.rgb(*color)
    end

    for u in u0..u1: 1/mu
      for v in v0..v1: 1/nv
        x,y,z = f(u,v)
        point3d(canvas,c,s,m*x/wx,m*y/wy,m*z/wz)
      end
    end
    for v in v0..v1: 1/mv
      for u in u0..u1: 1/nu
        x,y,z = f(u,v)
        point3d(canvas,c,s,m*x/wx,m*y/wy,m*z/wz)
      end
    end
    canvas.rgb(0,0,0,0.8)
    sys3d(canvas,c,s)
  end,

  function vplot(f,argm={})
    {color = null,
     t0=0, t1=1, n=100
    } = argm
    canvas = self.c
    wx = self.wx; wy = self.wy; wz = self.wz
    px = self.px; py = self.py; pz = self.pz
    mx = self.mx; my = self.my
    nx = self.nx; ny = self.ny
    phi = self.phi
    m = 0.5
    c = cos(phi)
    s = sin(phi)

    if color is null
      canvas.rgb(0,0,0.4)
    else
      canvas.rgb(*color)
    end

    for t in t0..t1: 1/n
      x,y,z = f(t)
      point3d(canvas,c,s,m*x/wx,m*y/wy,m*z/wz)
    end

    canvas.rgb(0,0,0,0.2)
    for t in t0..t1: 1/n
      x,y,z = f(t)
      point3d(canvas,c,s,m*x/wx,m*y/wy,0)
    end

    canvas.rgb(0,0,0,0.8)
    sys3d(canvas,c,s)
  end
}

function system(argm = {})
  { w=960,h=640,wx=10,wy=10,px=0,py=0,n=1000,dark=false,
    scale = null
  } = argm
  show_grid = argm("grid") else true
  canvas = gx.canvas(w,h)
  if scale is null
    fscale = null
  else
    fscale = scale
    canvas.scale(scale,scale)
  end
  if dark
    bg = [0,0.02,0.06]
    csys = [0.3,0.3,0.3]
    cgrid = [0.1,0.1,0.1]
    ctab = color_table_dark
  else
    bg = [1,1,1]
    csys = [0.7,0.7,0.7]
    cgrid = [0.9,0.9,0.9]
    ctab = color_table
  end
  canvas.clear(*bg)
  if show_grid
    grid(canvas,w,h,csys,cgrid,fscale)
  end
  canvas.rgb(*ctab[0])
  return table System{
    c=canvas, w=w, h=h, n=n,
    wx=wx, wy=wy, px=px, py=py,
    point = canvas.point, needle = canvas.needle,
    color_index = 0, ctab = ctab, bg=bg,
    csys=csys, cgrid=cgrid,
    ani = false, fscale = fscale
  }
end

function system3d(argm = {})
  { w=960,h=640,
    wx=10,wy=10,wz=10,px=0,py=0,pz=0,
    nx=1000, ny=1000, mx=10, my=10, dark=false,
    phi = 2.0
  } = argm
  canvas = gx.canvas(w,h)
  if dark
    bg = [0,0.02,0.06]
    ctab = color_table_dark
  else
    bg = [1,1,1]
    ctab = color_table3d
  end
  canvas.clear(*bg)
  canvas.rgb(0.2,0.4,0.6,0.4)
  return table System3d{
    c=canvas, w=w, h=h, mx=mx, my=my, nx=nx, ny=ny,
    wx=wx, wy=wy, wz=wz, px=px, py=py, pz=pz,
    point = canvas.point, needle = canvas.needle,
    color_index = 0, ctab = ctab, bg=bg, phi = phi
  }
end

end




