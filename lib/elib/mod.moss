
function inspect(m)
   if not m: Map
      m = record(m)
   end

   lower = |x| x.lower()
   fns = m.filter(|x| m[x]: Function).sort(lower)
   values = m.filter(|x| not m[x]: Function).sort(lower)

   buffer = []

   if len(values)!=0
      vcol = max(8,values.map(len).max())
      x = "Value".ljust(vcol)
      y = "Type"
      buffer.push("{} | {}\n" % [x,y])
      for v in values
         x = v.ljust(vcol)
         y = type(m[v])
         buffer.push("{} | {}\n" % [x,y])
      end
   end

   if len(fns)!=0
      fcol = max(8,fns.map(len).max())
      if len(buffer)!=0
         buffer.push("\n")
      end
      x = "Function".ljust(fcol)
      y = "Argc"
      buffer.push("{} | {}\n" % [x,y])
      for f in fns
         x = f.ljust(fcol)
         y = m[f].argc()
         buffer.push("{} | {}\n" % [x,y])
      end
   end

   return buffer.join()
end

index = [
   "container/deque",
   "copylib",
   "fs/path",
   "fs/tree",
   "functional",
   "hash",
   "itertools",
   "math",
   "math/cf",
   "math/cmath",
   "math/la",
   "math/la/inversion",
   "math/multiset",
   "math/na",
   "math/na/difftab",
   "math/na/quad",
   "math/nt",
   "math/ode",
   "math/rational",
   "math/sf",
   "math/sf/ei",
   "math/statistics/reg",
   "plotlib",
   "plotlib/color",
   "ser/json",
   "string/split",
   "string/syntax",
   "svg/plotlib",
   "sys/stackless"
]

elib_index = [
   "elib/continuations",
   "elib/itertools",
   "elib/lang",
   "elib/mod",
   "elib/optimizer",
   "elib/pc",
   "elib/rand"
]


